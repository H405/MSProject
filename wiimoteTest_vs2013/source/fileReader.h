//*****************************************************************************
// ファイル読み込みクラス [fileReader.h]
//	Author : KOTARO NAGASAKI
//*****************************************************************************
#ifndef _FILE_READER_H_
#define _FILE_READER_H_

//*****************************************************************************
//	インクルード定義
//*****************************************************************************
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<mbstring.h>//_ismbblead()

//*****************************************************************************
//	マクロ定義
//*****************************************************************************
#define LINE_MAX_LENGTH (1024)

//*****************************************************************************
//	クラス定義
//*****************************************************************************
class CFileReader
{
public:

	CFileReader();
	~CFileReader();

	//=============================================================================
	//	ファイルを開く
	//
	//	指定のファイルを開く
	//	ファイルが閉じられていない状態でファイルを開いた場合は、閉じてから開く
	//=============================================================================
	void FileOpen(char* _fileName, char* _openType);

	//=============================================================================
	//	ファイルを閉じる
	//=============================================================================
	void FileClose();

	//=============================================================================
	//	１行取得処理
	//
	//	※１行の長さが一定以上の場合は失敗して止まる可能性あり
	//	ヘッダーファイルで指定している	LINE_MAX_LENGTH	マクロの中身を書き換えること
	//=============================================================================
	void GetLine(char* _getLine);

	//=============================================================================
	//	文字列の読み飛ばし処理
	//
	//	引数で指定された文字列と完全に一致するまで、文字列を読み飛ばす
	//	返り値として、そこまでの長さを返す
	//=============================================================================
	int SkipToWords(char* _skipWord);

	//=============================================================================
	//	文字列長さ取得処理
	//
	//	現在のファイルから読み込んで
	//	引数で指定された文字列と完全に一致するまでの、文字列の長さを返す
	//
	//	読み込んだ後、元の位置まで読み込み位置を戻す
	//=============================================================================
	int myStrLength(char* _skipWord);

	//=============================================================================
	//	文字列の長さ取得処理
	//
	//	引数１(_readWords)の文字列を読み込んで
	//	引数２(_skipWord)で指定された文字列と完全に一致するまでの、文字列の長さを返す
	//	例　引数１が"aaabbc"　引数２が"c"　の場合、　"６"　を返す
	//	引数１を全て読み込んでも、引数２が見つからなかった場合は　”-1”　を返す
	//
	//	引数２にnullptrを指定した場合、strlen(引数１)を返す
	//=============================================================================
	int myStrLength(char* _readWords, char* _skipWord);

private:

	int skipIndex;
	FILE* filePointer;
};

#endif

//-----------------------------------EOF---------------------------------------