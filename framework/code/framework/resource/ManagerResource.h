//==============================================================================
//
// File   : ManagerResource.h
// Brief  : リソース管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/15 thu : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_RESOURCE_H
#define MY_MANAGER_RESOURCE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include <stdio.h>
#include <tchar.h>

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
template< class TypeItem >
class ManagerResource
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerResource( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	virtual ~ManagerResource( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : TCHAR* pDirectory					: 基準ディレクトリ
	// Arg    : int maximumItem						: 最大要素数
	//==============================================================================
	virtual int Initialize( TCHAR* pDirectory, int maximumItem );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	virtual int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : TCHAR* pDirectory					: 基準ディレクトリ
	// Arg    : int maximumItem						: 最大要素数
	//==============================================================================
	virtual int Reinitialize( TCHAR* pDirectory, int maximumItem );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerResource* pOut				: コピー先アドレス
	//==============================================================================
	virtual int Copy( ManagerResource* pOut ) const;

	//==============================================================================
	// Brief  : リソースの読み込み
	// Return : int									: リソースID
	// Arg    : TCHAR* pNameFile					: ファイル名
	//==============================================================================
	int Load( TCHAR* pNameFile );

	//==============================================================================
	// Brief  : リソースの取得
	// Return : TypeItem*							: リソース
	// Arg    : TCHAR* pNameFile					: ファイル名
	//==============================================================================
	TypeItem* Get( TCHAR* pNameFile );

	//==============================================================================
	// Brief  : リソースの取得
	// Return : TypeItem*							: リソース
	// Arg    : int id								: リソースID
	//==============================================================================
	TypeItem* Get( int id );

	//==============================================================================
	// Brief  : リソースの開放
	// Return : void								: なし
	// Arg    : TCHAR* pNameFile					: ファイル名
	//==============================================================================
	void Release( TCHAR* pNameFile );

	//==============================================================================
	// Brief  : リソースの開放
	// Return : void								: なし
	// Arg    : int id								: リソースID
	//==============================================================================
	void Release( int id );

protected:
	// 要素
	class Item
	{
	public:
		Item( void );
		~Item( void );
		int Initialize( void );
		int Finalize( void );
		int Reinitialize( void );

		int			id_;			// 登録ID
		TypeItem*	pItem_;			// 要素
		TCHAR*		pPath_;			// ファイルパス
		bool		isEnable_;		// 有効フラグ

	protected:

	private:
		void InitializeSelf( void );
	};

	int GetId( TCHAR* pPath );
	virtual int LoadResource( TCHAR* pPath, int index );
	virtual void ReleaseResource( int index );

	int		maximumItem_;		// 要素の最大数
	TCHAR*	pDirectory_;		// 基準ディレクトリ
	Item*	pBufferItem_;		// リソースの格納領域


private:
	virtual void InitializeSelf( void );
	ManagerResource( const ManagerResource& );
	ManagerResource operator=( const ManagerResource& );
};

#endif	// MY_MANAGER_RESOURCE_H
