//==============================================================================
//
// File   : ManagerCamera.h
// Brief  : カメラ管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/11/20 fri : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_CAMERA_H
#define MY_MANAGER_CAMERA_H

//******************************************************************************
// インクルード
//******************************************************************************

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class CameraObject;

//******************************************************************************
// クラス定義
//******************************************************************************
class ManagerCamera
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerCamera( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~ManagerCamera( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int countCamera						: カメラ数
	//==============================================================================
	int Initialize( int countCamera );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int countCamera						: カメラ数
	//==============================================================================
	int Reinitialize( int countCamera );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerCamera* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( ManagerCamera* pOut ) const;

	//==============================================================================
	// Brief  : 更新
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );

	//==============================================================================
	// Brief  : カメラの取得
	// Return : CameraObject*						: カメラ
	// Arg    : int index							: 番号
	//==============================================================================
	CameraObject* GetCamera( int index );

protected:

private:
	void InitializeSelf( void );
	ManagerCamera( const ManagerCamera& );
	ManagerCamera operator=( const ManagerCamera& );

	int				countCamera_;		// カメラ数
	CameraObject*	pCamera_;			// カメラ

#ifdef _DEVELOP
	int				indexDebug_;		// デバッグカメラ番号
	bool			isPressingKey_;		// デバッグキーが押されている
#endif
};

#endif	// MY_MANAGER_CAMERA_H
