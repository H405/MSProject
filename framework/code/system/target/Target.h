//==============================================================================
//
// File   : Target.h
// Brief  : ターゲットオブジェクトクラス
// Author : Kotaro Nagasaki
// Date   : 2015/10/29 Tur : Kotaro Nagasaki : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_TARGET_H
#define MY_TARGET_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************
typedef enum
{
	COLOR_STATE_R = 0,	//	赤
	COLOR_STATE_G,		//	緑
	COLOR_STATE_B,		//	青
	COLOR_STATE_W,		//	白
	COLOR_STATE_S,		//	スペシャル（黄色？）
	COLOR_STATE_MAX
}COLOR_STATE;

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class ObjectBillboard;
class Effect;
class EffectParameter;
class Texture;

//******************************************************************************
// クラス定義
//******************************************************************************
class Target
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	Target( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~Target( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirect3DDevice9* pDevice			: Direct3Dデバイス
	// Arg    : const EffectParameter* pParameter	: エフェクトパラメータ
	// Arg    : Effect* pEffectGeneral				: 通常描画エフェクト
	// Arg    : IDirect3DTexture9* pTexture			: テクスチャ
	//==============================================================================
	int Initialize(
	IDirect3DDevice9* pDevice,
	const EffectParameter* pParameter,
	Effect* pEffectGeneral,
	Texture* pTextureCross,
	Texture* pTextureArrow,
	Texture* pTextureCircle);

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	//==============================================================================
	int Set(D3DXVECTOR3 _pos, COLOR_STATE _colorState = COLOR_STATE_W);

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );

	//==============================================================================
	// Brief  : cross出現時の更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void updateAppearCross( void );

	//==============================================================================
	// Brief  : Arrow出現時の更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void updateAppearArrow( void );
	void updateAppearArrowBig( void );

	//==============================================================================
	// Brief  : Circle出現時の更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void updateAppearCircle( void );
	void updateAppearCircleBig( void );

	//==============================================================================
	// Brief  : 消滅時の更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void updateDisAppear( void );

	//==============================================================================
	// Brief  : ターゲットの消滅処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Dissappear();

	//==============================================================================
	// Brief  : ターゲットの消滅処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================

	//==============================================================================
	// アクセサ
	//==============================================================================
	D3DXVECTOR3 getPosition(){return pos;}
	float getScale();
	bool IsEnable(){return enable;}
	void setInvViewMatrix(D3DXMATRIX _invViewMatrix){invViewMatrix = _invViewMatrix;};

	COLOR_STATE getColorState(){return colorState;}

protected:

	ObjectBillboard* targetCross;
	ObjectBillboard* targetArrow;
	ObjectBillboard* targetCircle;

	D3DXVECTOR3 targetCrossLocalPos;
	D3DXVECTOR3 targetArrowLocalPos;
	D3DXVECTOR3 targetCircleLocalPos;

	//	位置情報
	D3DXVECTOR3 pos;

	//	カメラの逆行列
	D3DXMATRIX invViewMatrix;

	//	使用可能フラグ
	bool enable;

	//	カウンタ
	int counter;

	//	色情報
	COLOR_STATE colorState;

private:
	void InitializeSelf( void );
	Target( const Target& );
	Target operator=( const Target& );

	//	更新関数格納用ポインタ
	void (Target::*fpUpdate)(void);
};

#endif	// MY_TARGET_H
