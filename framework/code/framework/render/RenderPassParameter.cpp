//==============================================================================
//
// File   : RenderPassParameter.cpp
// Brief  : 描画パスパラメータ
// Author : Taiga Shirakawa
// Date   : 2015/10/31 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "RenderPassParameter.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
RenderPassParameter::RenderPassParameter( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
RenderPassParameter::~RenderPassParameter( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void RenderPassParameter::InitializeSelf( void )
{
	// メンバ変数の初期化
	width_ = -1;
	height_ = -1;
	for( int counterRenderTarget = 0; counterRenderTarget < MAXIMUM_RENDER_TARGET; ++counterRenderTarget )
	{
		pFormat_[ counterRenderTarget ] = D3DFMT_A8R8G8B8;
		pCountMultiple_[ counterRenderTarget ] = 1;
	}
	flagClear_ = (D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER);
	clearTarget_ = D3DCOLOR_RGBA( 0, 0, 0, 0 );
	clearZBuffer_ = 1.0f;
	clearStencil_ = 0;
	pSurfaceDepth_ = nullptr;
}
