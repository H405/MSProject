//==============================================================================
//
// File   : RenderTarget.h
// Brief  : 描画対象
// Author : Taiga Shirakawa
// Date   : 2015/10/10 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_RENDER_TARGET_H
#define MY_RENDER_TARGET_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class RenderTarget
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	RenderTarget( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~RenderTarget( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirect3DDevice9* pDevice			: Direct3Dデバイス
	//==============================================================================
	int Initialize( IDirect3DDevice9* pDevice );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirect3DDevice9* pDevice			: Direct3Dデバイス
	//==============================================================================
	int Reinitialize( IDirect3DDevice9* pDevice );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : RenderTarget* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( RenderTarget* pOut ) const;

	//==============================================================================
	// Brief  : 描画対象に設定
	// Return : void								: なし
	// Arg    : int index							: 設定する番号
	//==============================================================================
	void Set( int index );

	//==============================================================================
	// アクセサ
	//==============================================================================
	void SetTexture( IDirect3DTexture9* pValue );
	IDirect3DTexture9* GetTexture( void ) const;
	void SetSurfaceTexture( IDirect3DSurface9* pValue );
	IDirect3DSurface9* GetSurfaceTexture( void ) const;
	void SetSurfaceDepth( IDirect3DSurface9* pValue );
	IDirect3DSurface9* GetSurfaceDepth( void ) const;
	void SetIsEnable( bool value );
	bool GetIsEnable( void ) const;
	bool IsEnable( void ) const;

protected:

private:
	void InitializeSelf( void );
	RenderTarget( const RenderTarget& );
	RenderTarget operator=( const RenderTarget& );

	IDirect3DDevice9*	pDevice_;				// Direct3Dデバイス
	IDirect3DTexture9*	pTexture_;				// テクスチャ
	IDirect3DSurface9*	pSurfaceTexture_;		// テクスチャサーフェイス
	IDirect3DSurface9*	pSurfaceDepth_;			// 深度バッファ
	bool				isEnable_;				// 有効フラグ
};

#endif	// MY_RENDER_TARGET_H
