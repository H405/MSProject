//==============================================================================
//
// File   : Fireworks.h
// Brief  : 花火オブジェクトクラス
// Author : Kotaro Nagasaki
// Date   : 2015/10/29 Tur : Kotaro Nagasaki : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_FIREWORKS_H
#define MY_FIREWORKS_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "../object/ObjectMovement.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class ManagerPoint;

//******************************************************************************
// クラス定義
//******************************************************************************
class Fireworks
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	Fireworks( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~Fireworks( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	//==============================================================================
	int Set(
		ManagerPoint* _managerPoint,
		D3DXVECTOR3 _pos,
		D3DXVECTOR3 _speed,
		float _rot,
		float _rotSpeed);

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );

	//==============================================================================
	// Brief  : 花火の爆発処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void burn();

	//==============================================================================
	// アクセサ
	//==============================================================================
	D3DXVECTOR3 getPosition(){return pos;}
	bool IsEnable(){return enable;}

protected:

	//	位置情報
	D3DXVECTOR3 pos;

	//	移動の回転方向
	float rot;

	//	Z軸の回転速度（１アップデートでどのくらい回転するか）
	float rotSpeed;

	//	移動速度
	D3DXVECTOR3 speed;

	//	ポイントスプライトクラス管理オブジェクト
	ManagerPoint* managerPoint;

	//	使用可能フラグ
	bool enable;

	//	自然消滅までのカウンタ
	int deleteCount;

private:
	void InitializeSelf( void );
	Fireworks( const Fireworks& );
	Fireworks operator=( const Fireworks& );
};

#endif	// MY_FIREWORKS_H
