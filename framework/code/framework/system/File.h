//==============================================================================
//
// File   : File.h
// Brief  : ファイル読み込みクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/29 thu : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_FILE_H
#define MY_FILE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include <stdio.h>
#include <tchar.h>

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class File
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	File( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~File( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : const TCHAR* pNameFile				: ファイル名
	//==============================================================================
	int Initialize( const TCHAR* pNameFile );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : const TCHAR* pNameFile				: ファイル名
	//==============================================================================
	int Reinitialize( const TCHAR* pNameFile );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : File* pOut							: コピー先アドレス
	//==============================================================================
	int Copy( File* pOut ) const;

	//==============================================================================
	// Brief  : 種類の判定
	// Return : bool								: 種類かどうか
	// Arg    : const TCHAR* pType					: ファイルの種類
	//==============================================================================
	bool IsType( const TCHAR* pType );

	//==============================================================================
	// Brief  : 読み込み
	// Return : void								: なし
	// Arg    : Type* pOut							: 値の格納先アドレス
	// Arg    : int count							: 読み込み要素数
	//==============================================================================
	template< typename Type >
	void Read( Type* pOut, int count = 1 );

	//==============================================================================
	// Brief  : カーソルの加算
	// Return : void								: なし
	// Arg    : unsigned long value					: 加算値
	//==============================================================================
	void AddCursor( unsigned long value );

	//==============================================================================
	// アクセサ
	//==============================================================================
	void SetCursor( unsigned long value );
	unsigned long GetCursor( void ) const;
	void GetType( TCHAR* pOut, int lengthOut ) const;
	unsigned long GetSize( void ) const;
	unsigned long GetVersion( void ) const;
	unsigned long GetForm( void ) const;
	unsigned short GetCode( void ) const;
	unsigned short GetCompress( void ) const;

protected:

private:
	void InitializeSelf( void );
	File( const File& );
	File operator=( const File& );

	static const int	COUNT_SIZE_TYPE = 4;		// 種類の文字数

	FILE*			pFile_;								// ファイル
	char*			pBuffer_;							// データバッファ
	unsigned long	cursor_;							// カーソル
	TCHAR			pType_[ COUNT_SIZE_TYPE + 1 ];		// 種類
	unsigned long	size_;								// ファイルサイズ
	unsigned long	version_;							// バージョン
	unsigned long	form_;								// 保存形式
	unsigned short	code_;								// 暗号化形式
	unsigned short	compress_;							// 圧縮形式
};

#endif	// MY_FILE_H
