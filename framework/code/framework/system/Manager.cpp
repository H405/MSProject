//==============================================================================
//
// File   : Manager.cpp
// Brief  : プログラム管理クラスの基本クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/09 fri : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include <tchar.h>
#include "Manager.h"
#include "Window.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Manager::Manager( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Manager::~Manager( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : HINSTANCE instanceHandle			: インスタンスハンドル
// Arg    : int typeShow						: 表示の種類
//==============================================================================
int Manager::Initialize( HINSTANCE instanceHandle, int typeShow )
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Manager::Finalize( void )
{
	// 格納領域の開放
	delete pWindow_;
	pWindow_ = nullptr;

	// クラス内部の初期化
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : HINSTANCE instanceHandle			: インスタンスハンドル
// Arg    : int typeShow						: 表示の種類
//==============================================================================
int Manager::Reinitialize( HINSTANCE instanceHandle, int typeShow )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize( instanceHandle, typeShow );
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : Manager* pOut						: コピー先アドレス
//==============================================================================
int Manager::Copy( Manager* pOut ) const
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 更新処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Manager::Update( void )
{
}

//==============================================================================
// Brief  : 描画処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Manager::Draw( void )
{
}

//==============================================================================
// Brief  : ウィンドウの設定
// Return : void								: なし
// Arg    : Window* pValue						: 設定する値
//==============================================================================
void Manager::SetWindow( Window* pValue )
{
	// 値の設定
	pWindow_ = pValue;
}

//==============================================================================
// Brief  : ウィンドウの取得
// Return : Window*								: 返却する値
// Arg    : void								: なし
//==============================================================================
Window* Manager::GetWindow( void ) const
{
	// 値の返却
	return pWindow_;
}

//==============================================================================
// Brief  : シーン終了フラグの取得
// Return : bool								: 返却する値
// Arg    : void								: なし
//==============================================================================
bool Manager::GetIsEnd( void ) const
{
	// 値の返却
	return isEnd_;
}

//==============================================================================
// Brief  : シーン終了フラグの判定
// Return : bool								: 判定結果
// Arg    : void								: なし
//==============================================================================
bool Manager::IsEnd( void ) const
{
	// 値の返却
	return isEnd_;
}

#ifdef _DEVELOP
//==============================================================================
// Brief  : 更新FPSの設定
// Return : void								: なし
// Arg    : unsigned long value					: 設定する値
//==============================================================================
void Manager::SetFpsUpdate( unsigned long value )
{
	// 値の設定
	fpsUpdate_ = static_cast< int >( value );
}

//==============================================================================
// Brief  : 描画FPSの設定
// Return : void								: なし
// Arg    : unsigned long value					: 設定する値
//==============================================================================
void Manager::SetFpsDraw( unsigned long value )
{
	// 値の設定
	fpsDraw_ = static_cast< int >( value );
}
#endif

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Manager::InitializeSelf( void )
{
	// メンバ変数の初期化
	isEnd_ = false;
	pWindow_ = nullptr;
#ifdef _DEVELOP
	fpsUpdate_ = 0;
	fpsDraw_ = 0;
#endif
}
