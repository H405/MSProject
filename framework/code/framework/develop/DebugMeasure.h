//==============================================================================
//
// File   : DebugMeasure.h
// Brief  : デバッグ表示
// Author : Taiga Shirakawa
// Date   : 2015/10/09 fri : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_DEBUG_MEASURE_H
#define MY_DEBUG_MEASURE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"
#include <windows.h>
#include <tchar.h>
#include "DebugProc.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************
#ifdef _DEBUG
#define MeasureTime( pFormat, ... )		DebugMeasure debugMeasure( pFormat, __VA_ARGS__ )
#else
#define MeasureTime( pFormat, ... )		static_cast< void >( 0 )
#endif

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class ManagerDebugMeasure
{
public:
	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	static int Initialize( void );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	static int Finalize( void );

	//==============================================================================
	// Brief  : ログの設定
	// Return : int									: 実行結果
	// Arg    : const TCHAR* pLog					: ログ
	//==============================================================================
	static void SetLog( const TCHAR* pLog );

	//==============================================================================
	// Brief  : 更新処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	static void Update( void );

	static const unsigned int	MAXIMUM_SIZE_BUFFER = 4096;

protected:

private:
	ManagerDebugMeasure( void );
	~ManagerDebugMeasure( void );
	ManagerDebugMeasure( const ManagerDebugMeasure& );
	ManagerDebugMeasure operator=( const ManagerDebugMeasure& );

	static TCHAR*	pBuffer_;		// 文字列格納用バッファ
};

class DebugMeasure
{
public:
	DebugMeasure( TCHAR* pFormat, ... );
	~DebugMeasure( void );

private:
	TCHAR*			pBuffer_;		// 文字列格納用バッファ
	LARGE_INTEGER	timeBegin_;		// 計測開始時間
};

#endif	// MY_DEBUG_MEASURE_H
