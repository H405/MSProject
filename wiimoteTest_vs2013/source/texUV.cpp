//*****************************************************************************
//	テクスチャUV値 [texUV.cpp]
//	Author : KOTARO NAGASAKI
//	create : 4/15
//	Update : 4/15
//*****************************************************************************

//*****************************************************************************
//	インクルード定義
//*****************************************************************************
#include "texUV.h"

//=============================================================================
//	コンストラクタ
//=============================================================================
TEXUV::TEXUV()
{
	left = 0.0f;
	top = 0.0f;
	right = 1.0f;
	bottom = 1.0f;
}
//=============================================================================
//	コンストラクタ
//=============================================================================
TEXUV::TEXUV(float _left , float _top , float _right , float _bottom)
{
	left = _left;
	top = _top;
	right = _right;
	bottom = _bottom;
}
//=============================================================================
//	デストラクタ
//=============================================================================
TEXUV::~TEXUV()
{
	left = 0.0f;
	top = 0.0f;
	right = 1.0f;
	bottom = 1.0f;
}

//=============================================================================
//	演算子のオーバーロード(代入)
//=============================================================================
TEXUV TEXUV::operator=(const TEXUV& _texUV/*右辺の処理結果*/)
{
	left = _texUV.left;
	top = _texUV.top;
	right = _texUV.right;
	bottom = _texUV.bottom;

	return *this;
}

//
//	加算処理
//
//-------------------------------------------------------------------------------
//=============================================================================
//	演算子のオーバーロード(インクリメント)先加算
//=============================================================================
TEXUV TEXUV::operator++()
{
	left++;
	top++;
	right++;
	bottom++;

	return *this;
}
//=============================================================================
//	演算子のオーバーロード(インクリメント)後加算
//=============================================================================
TEXUV TEXUV::operator++(int)
{
	TEXUV color4f = *this;

	left++;
	top++;
	right++;
	bottom++;

	return color4f;
}
//=============================================================================
//	演算子のオーバーロード(COLOR同士の加算)返り値で加算
//=============================================================================
TEXUV TEXUV::operator+(const TEXUV& _texUV)
{
	TEXUV color4f;

	color4f.left = left + _texUV.left;
	color4f.top = top + _texUV.top;
	color4f.right = right + _texUV.right;
	color4f.bottom = bottom + _texUV.bottom;
	
	return color4f;
}
//=============================================================================
//	演算子のオーバーロード(COLOR同士の加算)この関数内で加算
//=============================================================================
TEXUV TEXUV::operator+=(const TEXUV& _texUV)
{
	left += _texUV.left;
	top += _texUV.top;
	right += _texUV.right;
	bottom += _texUV.bottom;

	return *this;
}
//-------------------------------------------------------------------------------

//
//	減算処理
//
//-------------------------------------------------------------------------------
//=============================================================================
//	演算子のオーバーロード(デクリメント)先減算
//=============================================================================
TEXUV TEXUV::operator--()
{
	left--;
	top--;
	right--;
	bottom--;

	return *this;
}
//=============================================================================
//	演算子のオーバーロード(デクリメント)後減算
//=============================================================================
TEXUV TEXUV::operator--(int)
{
	TEXUV color4f = *this;

	left--;
	top--;
	right--;
	bottom--;

	return color4f;
}
//=============================================================================
//	演算子のオーバーロード(COLOR同士の減算)返り値で加算
//=============================================================================
TEXUV TEXUV::operator-(const TEXUV& _texUV)
{
	TEXUV color4f;

	color4f.left = left - _texUV.left;
	color4f.top = top - _texUV.top;
	color4f.right = right - _texUV.right;
	color4f.bottom = bottom - _texUV.bottom;

	return color4f;
}
//=============================================================================
//	演算子のオーバーロード(COLOR同士の減算)この関数内で加算
//=============================================================================
TEXUV TEXUV::operator-=(const TEXUV& _texUV)
{
	left -= _texUV.left;
	top -= _texUV.top;
	right -= _texUV.right;
	bottom -= _texUV.bottom;

	return *this;
}
//-------------------------------------------------------------------------------

//
//	乗算処理
//
//-------------------------------------------------------------------------------
//=============================================================================
//	演算子のオーバーロード(COLORと実数の掛け算)戻り値で乗算
//=============================================================================
TEXUV TEXUV::operator*(const float _num)
{
	TEXUV color4f;

	color4f.left = left * _num;
	color4f.top = top * _num;
	color4f.right = right * _num;
	color4f.bottom = bottom * _num;

	return color4f;
}
//=============================================================================
//	演算子のオーバーロード(COLORと実数の掛け算)この関数内で乗算
//=============================================================================
TEXUV TEXUV::operator*=(const float _num)
{
	left *= _num;
	top *= _num;
	right *= _num;
	bottom *= _num;

	return *this;
}
//-------------------------------------------------------------------------------

//
//	割り算処理
//
//-------------------------------------------------------------------------------
//=============================================================================
//	演算子のオーバーロード(COLORと実数の割り算)戻り値で割り算
//=============================================================================
TEXUV TEXUV::operator/(const float _num)
{
	TEXUV color4f;

	float inv = 1.0f / _num;

	color4f.left = left * inv;
	color4f.top = top * inv;
	color4f.right = right * inv;
	color4f.bottom = bottom * inv;

	return color4f;
}
//=============================================================================
//	演算子のオーバーロード(COLORと実数の割り算)この関数内で割り算
//=============================================================================
TEXUV TEXUV::operator/=(const float _num)
{
	left /= _num;
	top /= _num;
	right /= _num;
	bottom /= _num;

	return *this;
}
//-------------------------------------------------------------------------------

//-----------------------------------EOF---------------------------------------