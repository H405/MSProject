//==============================================================================
//
// File   : Graphic.cpp
// Brief  : 描画処理の管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/10 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "Graphic.h"
#include "Drawer.h"
#include "../develop/Debug.h"
#include "../develop/DebugProc.h"
#include "../render/RenderMatrix.h"
#include "../system/ManagerDraw.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************
ManagerDraw< Graphic >*	Graphic::pManagerDraw_ = nullptr;		// 描画管理クラス

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Graphic::Graphic( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Graphic::~Graphic( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : int priority						: 描画優先度
//==============================================================================
int Graphic::Initialize( int priority )
{
	// エラーチェック
	Assert( pManagerDraw_ != nullptr, _T( "描画管理クラスが登録されていません。" ) );

	// 管理クラスに自身を登録
	idDraw_ = pManagerDraw_->Register( this, priority );

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Graphic::Finalize( void )
{
	// 格納領域の開放
	if( ppDraw_ != nullptr )
	{
		for( int counterItem = 0; counterItem < countDraw_; ++counterItem )
		{
			delete ppDraw_[ counterItem ];
			ppDraw_[ counterItem ] = nullptr;
		}
	}
	delete[] ppDraw_;
	ppDraw_ = nullptr;

	// エラーチェック
	Assert( pManagerDraw_ != nullptr, _T( "描画管理クラスが登録されていません。" ) );

	// 管理クラスに自身の登録解除を要請
	pManagerDraw_->Unregister( idDraw_ );

	// クラス内部の初期化
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : int priority						: 描画優先度
//==============================================================================
int Graphic::Reinitialize( int priority )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize( priority );
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : Graphic* pOut						: コピー先アドレス
//==============================================================================
int Graphic::Copy( Graphic* pOut ) const
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 描画処理
// Return : void								: なし
// Arg    : int index							: 描画番号
//==============================================================================
void Graphic::Draw( int index )
{
	// エラーチェック
	if( ppDraw_ == nullptr )
	{
		return;
	}

	// 描画処理
	if( ppDraw_[ index ] != nullptr )
	{
		ppDraw_[ index ]->Draw( matrixWorld_ );
	}
}

//==============================================================================
// Brief  : 描画管理クラスの設定
// Return : void								: なし
// Arg    : ManagerDraw* pValue					: 設定する値
//==============================================================================
void Graphic::SetManagerDraw( ManagerDraw< Graphic >* pValue )
{
	// 値の設定
	pManagerDraw_ = pValue;
}

//==============================================================================
// Brief  : ワールドマトリクスの設定
// Return : void								: なし
// Arg    : const D3DXMATRIX& value				: 設定する値
//==============================================================================
void Graphic::SetMatrixWorld( const D3DXMATRIX& value )
{
	// 値の設定
	matrixWorld_ = value;
}

//==============================================================================
// Brief  : ワールドマトリクスの取得
// Return : void								: なし
// Arg    : D3DXMATRIX* pOut					: 値の格納アドレス
//==============================================================================
void Graphic::GetMatrixWorld( D3DXMATRIX* pOut ) const
{
	// 値の返却
	*pOut = matrixWorld_;
}

//==============================================================================
// Brief  : 有効フラグの設定
// Return : void								: なし
// Arg    : bool value							: 設定する値
//==============================================================================
void Graphic::SetIsEnable( bool value )
{
	// 値の設定
	isEnable_ = value;
}

//==============================================================================
// Brief  : 有効フラグの取得
// Return : bool								: 返却する値
// Arg    : void								: なし
//==============================================================================
bool Graphic::GetIsEnable( void ) const
{
	// 値の返却
	return isEnable_;
}

//==============================================================================
// Brief  : 有効フラグの判定
// Return : bool								: 判定結果
// Arg    : void								: なし
//==============================================================================
bool Graphic::IsEnable( void ) const
{
	// 値の返却
	return isEnable_;
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Graphic::InitializeSelf( void )
{
	// メンバ変数の初期化
	countDraw_ = 0;
	ppDraw_ = nullptr;
	matrixWorld_ = D3DXMATRIX( 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f );
	isEnable_ = true;
	idDraw_ = -1;
}
