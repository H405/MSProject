//*****************************************************************************
//	スクリーンショット処理 [ CScreenShot.cpp ]
//	Author : KOTARO NAGASAKI
//	create : 4/16
//	Update : 4/16
//*****************************************************************************

//*****************************************************************************
//	インクルード定義
//*****************************************************************************
#include "CScreenShot.h"
#include <stdio.h>
#include "../develop/Debug.h"

#pragma comment (lib , "d3d9.lib")
#pragma comment (lib , "d3dx9.lib")

//*****************************************************************************
//	静的変数定義
//*****************************************************************************
int CScreenShot::index = 0;

//=============================================================================
//	コンストラクタ
//=============================================================================
CScreenShot::CScreenShot(LPDIRECT3DDEVICE9 _device)
{
	Init(_device);
}
//=============================================================================
//	デストラクタ
//=============================================================================
CScreenShot::~CScreenShot()
{
}
//=============================================================================
//	初期化
//=============================================================================
void CScreenShot::Init(LPDIRECT3DDEVICE9 _device)
{
	device = _device;
}
//=============================================================================
//	作成
//=============================================================================
void CScreenShot::Create()
{
	LPDIRECT3DSURFACE9 pSurface;	//	サーフェース
	TCHAR fileName[100];	//	ファイル名
	FILE* fp;	//	ファイルポインタ
	char cImageNum[10];	//	読み書き用文字列
	int nImageNum = 0;	//	文字列から数字への変更

	//	ファイルからスクリーンショット数情報読み取り
	//-------------------------------------------------------------------------------
	fopen_s(&fp, "data/screenShot/screenShot.txt", "r");
	if (fp == NULL)
	{
#ifdef _DEBUG
		PrintDebugWnd("スクリーンショット用ファイルのオープン失敗");
#endif
	}

	fgets(cImageNum, 10, fp);

	fclose(fp);
	//-------------------------------------------------------------------------------

	//	ファイル名設定
	//-------------------------------------------------------------------------------
	//	文字列から数字への変換
	nImageNum = atoi(cImageNum);

	//	ファイル名保存( 識別子もここで保存 )
	sprintf_s(fileName, "data/screenShot/image%d.bmp", nImageNum);

	nImageNum++;

	//	数字から文字列への変換
	_itoa_s(nImageNum, cImageNum, 10);
	//-------------------------------------------------------------------------------

	//	スクリーンショット数情報書き込み
	//-------------------------------------------------------------------------------
	fopen_s(&fp, "data/screenShot/screenShot.txt", "w");
	if (fp == NULL)
	{
#ifdef _DEBUG
		PrintDebugWnd("スクリーンショット用ファイルのオープン失敗");
#endif
	}

	fputs(cImageNum, fp);

	fclose(fp);
	//-------------------------------------------------------------------------------

	device->GetRenderTarget(0, &pSurface);
	
	//	サーフェースの内容を指定のフォーマット、指定の名前で保存
	if (FAILED(D3DXSaveSurfaceToFile(fileName, D3DXIFF_BMP, pSurface, NULL, NULL)))
	{
#ifdef _DEBUG
		PrintDebugWnd("スクリーンショット撮影失敗");
#endif
	}

	//	Get系で取得したサーフェイスはAddRefが呼ばれているので忘れずに解放する
	pSurface->Release();
}

//-----------------------------------EOF---------------------------------------