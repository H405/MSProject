//==============================================================================
//
// File   : ManagerUpdate.h
// Brief  : 更新実行クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_UPDATE_H
#define MY_MANAGER_UPDATE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "ManagerExector.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class Object;

//******************************************************************************
// クラス定義
//******************************************************************************
template< class TypeItem >
class ManagerUpdate : public ManagerExector< TypeItem >
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerUpdate( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~ManagerUpdate( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumItem						: 最大要素数
	//==============================================================================
	int Initialize( int maximumItem );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumItem						: 最大要素数
	//==============================================================================
	int Reinitialize( int maximumItem );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerUpdate* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( ManagerUpdate* pOut ) const;

	//==============================================================================
	// Brief  : 実行
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Execute( void );

protected:

private:
	void InitializeSelf( void );
	ManagerUpdate( const ManagerUpdate& );
	ManagerUpdate operator=( const ManagerUpdate& );

};

#endif	// MY_MANAGER_UPDATE_H
