//==============================================================================
//
// File   : DirectDevice.h
// Brief  : Direct3Dデバイスクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/16 fri : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_DIRECT_DEVICE_H
#define MY_DIRECT_DEVICE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"
#include <windows.h>

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class DirectDevice
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	DirectDevice( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~DirectDevice( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : HWND windowHandle					: ウィンドウハンドル
	// Arg    : int width							: ウィンドウ幅
	// Arg    : int height							: ウィンドウ高さ
	// Arg    : bool isWindowMode					: ウィンドウモードフラグ
	//==============================================================================
	int Initialize( HWND windowHandle, int width, int height, bool isWindowMode );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : HWND windowHandle					: ウィンドウハンドル
	// Arg    : int width							: ウィンドウ幅
	// Arg    : int height							: ウィンドウ高さ
	// Arg    : bool isWindowMode					: ウィンドウモードフラグ
	//==============================================================================
	int Reinitialize( HWND windowHandle, int width, int height, bool isWindowMode );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : DirectDevice* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( DirectDevice* pOut ) const;

	//==============================================================================
	// アクセサ
	//==============================================================================
	IDirect3DDevice9* GetDevice( void ) const;
	bool GetIsWindowMode( void ) const;
	bool IsWindowMode( void ) const;

protected:

private:
	void InitializeSelf( void );
	DirectDevice( const DirectDevice& );
	DirectDevice operator=( const DirectDevice& );

	IDirect3DDevice9*	pDevice_;			// Direct3Dデバイス
	bool				isWindowMode_;		// ウィンドウモードフラグ
};

#endif	// MY_DIRECT_DEVICE_H
