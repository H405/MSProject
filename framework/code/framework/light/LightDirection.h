//==============================================================================
//
// File   : LightDirection.h
// Brief  : ディレクショナルライトクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_LIGHT_DIRECTION_H
#define MY_LIGHT_DIRECTION_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "Light.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class LightDirection : public Light
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	LightDirection( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~LightDirection( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Initialize( void );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Reinitialize( void );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : LightDirection* pOut				: コピー先アドレス
	//==============================================================================
	int Copy( LightDirection* pOut ) const;

	//==============================================================================
	// アクセサ
	//==============================================================================
	void Set( D3DXCOLOR diffuse, D3DXCOLOR specular, const D3DXVECTOR3& vector );
	void SetVector( const D3DXVECTOR3& value );
	void SetVector( float x, float y, float z );
	void SetVectorX( float x );
	void SetVectorY( float y );
	void SetVectorZ( float z );
	void GetVector( D3DXVECTOR3* pOut ) const;
	float GetVectorX( void ) const;
	float GetVectorY( void ) const;
	float GetVectorZ( void ) const;

protected:
	D3DXVECTOR3	vector_;		// 向いているベクトル

private:
	void InitializeSelf( void );
	LightDirection( const LightDirection& );
	LightDirection operator=( const LightDirection& );

};

#endif	// MY_LIGHT_DIRECTION_H
