//==============================================================================
//
// File   : ManagerExector.h
// Brief  : 実行クラスの基本クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/10 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_EXECTOR_H
#define MY_MANAGER_EXECTOR_H

//******************************************************************************
// インクルード
//******************************************************************************

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
template< class TypeItem >
class ManagerExector
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerExector( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	virtual ~ManagerExector( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumItem						: 最大要素数
	//==============================================================================
	virtual int Initialize( int maximumItem );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	virtual int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumItem						: 最大要素数
	//==============================================================================
	virtual int Reinitialize( int maximumItem );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerExector* pOut				: コピー先アドレス
	//==============================================================================
	virtual int Copy( ManagerExector* pOut ) const;

	//==============================================================================
	// Brief  : 実行
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	virtual int Execute( void );

	//==============================================================================
	// Brief  : 登録
	// Return : int									: 登録ID
	// Arg    : TypeItem* pItem						: 登録する要素
	// Arg    : int priority						: 優先度
	//==============================================================================
	int Register( TypeItem* pItem, int priority );

	//==============================================================================
	// Brief  : 登録解除
	// Return : void								: なし
	// Arg    : int id								: 対象ID
	//==============================================================================
	void Unregister( int id );

	//==============================================================================
	// アクセサ
	//==============================================================================
	void SetIsEnable( bool value );
	bool GetIsEnable( void ) const;
	bool IsEnable( void ) const;

protected:
	// 要素
	class Item
	{
	public:
		Item( void );
		~Item( void );
		int Initialize( void );
		int Finalize( void );
		int Reinitialize( void );

		int			id_;					// 登録ID
		int			priority_;				// 優先度
		int			indexNext_;				// 次の番号
		int			indexPrevious_;			// 前の番号
		TypeItem*	pItem_;					// 要素
		bool		needsUnregister_;		// 登録解除フラグ
		bool		isEnable_;				// 有効フラグ

	protected:

	private:
		void InitializeSelf( void );
	};

	int		countItem_;			// 要素数
	Item*	pBufferItem_;		// 要素格納領域
	int		indexTop_;			// 先頭の要素の番号
	int		indexTail_;			// 末尾の要素の番号
	bool	isEnable_;			// 有効フラグ

private:
	virtual void InitializeSelf( void );
	void UnregisterItem( int id );
	void UnregisterNeed( void );

	ManagerExector( const ManagerExector& );
	ManagerExector operator=( const ManagerExector& );
};

#endif	// MY_MANAGER_EXECTOR_H
