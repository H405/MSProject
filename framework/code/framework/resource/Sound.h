//==============================================================================
//
// File   : Sound.h
// Brief  : サウンドクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/25 sun : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_SOUND_H
#define MY_SOUND_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "xaudio2.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class Sound
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	Sound( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~Sound( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int countSourceVoice				: ソースボイス数
	// Arg    : IXAudio2SourceVoice** ppSourceVoice	: ソースボイス
	// Arg    : BYTE* pData							: データ
	// Arg    : DWORD size							: データサイズ
	//==============================================================================
	int Initialize( int countSourceVoice, IXAudio2SourceVoice** ppSourceVoice, BYTE* pData, DWORD size );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int countSourceVoice				: ソースボイス数
	// Arg    : IXAudio2SourceVoice** ppSourceVoice	: ソースボイス
	// Arg    : BYTE* pData							: データ
	// Arg    : DWORD size							: データサイズ
	//==============================================================================
	int Reinitialize( int countSourceVoice, IXAudio2SourceVoice** ppSourceVoice, BYTE* pData, DWORD size );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : Sound* pOut							: コピー先アドレス
	//==============================================================================
	int Copy( Sound* pOut ) const;

	//==============================================================================
	// Brief  : 再生
	// Return : int									: ソースボイス番号
	// Arg    : int countLoop						: ループ回数
	// Arg    : int indexSourceVoice				: ソースボイス番号
	//==============================================================================
	int Play( int countLoop = 0, int indexSourceVoice = -1 );

	//==============================================================================
	// Brief  : 一時停止
	// Return : int									: ソースボイス番号
	// Arg    : int indexSourceVoice				: ソースボイス番号
	//==============================================================================
	int Pause( int indexSourceVoice = -1 );

	//==============================================================================
	// Brief  : 一時停止解除
	// Return : int									: ソースボイス番号
	// Arg    : int indexSourceVoice				: ソースボイス番号
	//==============================================================================
	int Unpause( int indexSourceVoice = -1 );

	//==============================================================================
	// Brief  : 停止
	// Return : int									: ソースボイス番号
	// Arg    : int indexSourceVoice				: ソースボイス番号
	//==============================================================================
	int Stop( int indexSourceVoice = -1 );

	//==============================================================================
	// アクセサ
	//==============================================================================
	int SetVolume( float value, int indexSourceVoice = -1 );
	float GetVolume( int indexSourceVoice = -1 ) const;

protected:

private:
	void InitializeSelf( void );
	Sound( const Sound& );
	Sound operator=( const Sound& );

	int						countSourceVoice_;		// ソースボイス数
	int						indexSource_;			// ソースボイス番号
	IXAudio2SourceVoice**	ppSourceVoice_;			// ソースボイス
	BYTE*					pData_;					// データ
	DWORD					size_;					// データサイズ
	XAUDIO2_BUFFER			audioBuffer_;			// オーディオバッファ情報
};

#endif	// MY_SOUND_H
