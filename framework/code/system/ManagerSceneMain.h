//==============================================================================
//
// File   : ManagerSceneMain.h
// Brief  : シーン管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/11 sun : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_SCENE_MAIN_H
#define MY_MANAGER_SCENE_MAIN_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "../framework/scene/ManagerScene.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class SceneArgumentMain;
class SceneMain;

//******************************************************************************
// クラス定義
//******************************************************************************
class ManagerSceneMain : public ManagerScene
{
public:
	// シーンの種類
	enum
	{
		TYPE_NONE = 0,		// シーンなし
		TYPE_SPLASH,		// スプラッシュ
		TYPE_TITLE,			// タイトル
		TYPE_GAME,			// ゲーム
		TYPE_RESULT,		// リザルト
		TYPE_RANKING,		// ランキング
		TYPE_MAX			// 最大値
	};

	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerSceneMain( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~ManagerSceneMain( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int typeSceneBegin					: 開始シーン
	// Arg    : SceneArgumentMain* pArgument		: シーン引数
	//==============================================================================
	int Initialize( int typeSceneBegin, SceneArgumentMain* pArgument );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int typeSceneBegin					: 開始シーン
	// Arg    : SceneArgumentMain* pArgument		: シーン引数
	//==============================================================================
	int Reinitialize( int typeSceneBegin, SceneArgumentMain* pArgument );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerSceneMain* pOut				: コピー先アドレス
	//==============================================================================
	int Copy( ManagerSceneMain* pOut ) const;

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );


	//	NAGASAKI変更
	static bool demoFlag;
	static int demoCount;
	static int demoCountMax;
	static bool tutorialFlag;

protected:

private:
	void InitializeSelf( void );
	ManagerSceneMain( const ManagerSceneMain& );
	ManagerSceneMain operator=( const ManagerSceneMain& );

	SceneArgumentMain*	pArgument_;		// シーン引数
	SceneMain*			pScene_;		// シーン
};

#endif	// MY_MANAGER_SCENE_MAIN_H
