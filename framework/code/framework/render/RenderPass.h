//==============================================================================
//
// File   : RenderPass.h
// Brief  : パスクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/15 thu : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_RENDER_PASS_H
#define MY_RENDER_PASS_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class RenderTarget;

//******************************************************************************
// クラス定義
//******************************************************************************
class RenderPass
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	RenderPass( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~RenderPass( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirect3DDevice9* pDevice			: Direct3Dデバイス
	// Arg    : int countRenderTarget				: レンダーターゲットの数
	//==============================================================================
	int Initialize( IDirect3DDevice9* pDevice, int countRenderTarget );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirect3DDevice9* pDevice			: Direct3Dデバイス
	// Arg    : int countRenderTarget				: レンダーターゲットの数
	//==============================================================================
	int Reinitialize( IDirect3DDevice9* pDevice, int countRenderTarget );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : RenderPass* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( RenderPass* pOut ) const;

	//==============================================================================
	// アクセサ
	//==============================================================================
	int GetCountRenderTarget( void ) const;
	RenderTarget* GetRenderTarget( int index ) const;

protected:

private:
	void InitializeSelf( void );
	RenderPass( const RenderPass& );
	RenderPass operator=( const RenderPass& );

	int				countRenderTarget_;		// レンダーターゲット数
	RenderTarget**	ppRenderTarget_;		// レンダーターゲット
};

#endif	// MY_RENDER_PASS_H
