//==============================================================================
//
// File   : ManagerScene.h
// Brief  : シーン管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/11 sun : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_SCENE_H
#define MY_MANAGER_SCENE_H

//******************************************************************************
// インクルード
//******************************************************************************

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class SceneArgument;
class Scene;

//******************************************************************************
// クラス定義
//******************************************************************************
class ManagerScene
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerScene( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	virtual ~ManagerScene( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int typeSceneBegin					: 開始シーン
	// Arg    : SceneArgument* pArgument			: シーン引数
	//==============================================================================
	virtual int Initialize( int typeSceneBegin, SceneArgument* pArgument );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	virtual int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int typeSceneBegin					: 開始シーン
	// Arg    : SceneArgument* pArgument			: シーン引数
	//==============================================================================
	virtual int Reinitialize( int typeSceneBegin, SceneArgument* pArgument );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerScene* pOut					: コピー先アドレス
	//==============================================================================
	virtual int Copy( ManagerScene* pOut ) const;

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	virtual void Update( void );

	//==============================================================================
	// Brief  : シーンの切り替え
	// Return : void								: なし
	// Arg    : int typeScene						: 切り替えるシーン
	//==============================================================================
	void ShiftScene( int typeScene );

	//==============================================================================
	// アクセサ
	//==============================================================================
	int GetTypeSceneCurrent( void ) const;
	void SetTypeSceneNext( int value );
	int GetTypeSceneNext( void ) const;
	bool GetIsShifting( void ) const;
	bool IsShifting( void ) const;
	bool GetIsEnd( void ) const;
	bool IsEnd( void ) const;
	bool GetNeedsDelete( void ) const;
	bool NeedsDelete( void ) const;

protected:
	int		typeSceneCurrent_;		// 現在のシーン
	int		typeSceneNext_;			// 次のシーン
	bool	isShifting_;			// シーン切り替え中フラグ
	bool	isEnd_;					// シーン終了フラグ
	bool	needsDelete_;			// シーン管理クラス破棄フラグ

private:
	virtual void InitializeSelf( void );
	ManagerScene( const ManagerScene& );
	ManagerScene operator=( const ManagerScene& );

	SceneArgument*	pArgument_;		// シーン引数
	Scene*			pScene_;		// シーン
};

#endif	// MY_MANAGER_SCENE_H
