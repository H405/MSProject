//==============================================================================
//
// File   : InputPad.h
// Brief  : ゲームパッド入力クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/11 sun : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_INPUT_PAD_H
#define MY_INPUT_PAD_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "Input.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class InputPad : public Input
{
public:
	// キーの種類
	enum
	{
		TYPE_KEY_LEFT_UP = 0,		// 左スティック上
		TYPE_KEY_LEFT_DOWN,			// 左スティック下
		TYPE_KEY_LEFT_LEFT,			// 左スティック左
		TYPE_KEY_LEFT_RIGHT,		// 左スティック右
		TYPE_KEY_RIGHT_UP,			// 右スティック上
		TYPE_KEY_RIGHT_DOWN,		// 右スティック下
		TYPE_KEY_RIGHT_LEFT,		// 右スティック左
		TYPE_KEY_RIGHT_RIGHT,		// 右スティック右
		TYPE_BUTTON_00,				// ボタン0
		TYPE_BUTTON_01,				// ボタン1
		TYPE_BUTTON_02,				// ボタン2
		TYPE_BUTTON_03,				// ボタン3
		TYPE_BUTTON_04,				// ボタン4
		TYPE_BUTTON_05,				// ボタン5
		TYPE_BUTTON_06,				// ボタン6
		TYPE_BUTTON_07,				// ボタン7
		TYPE_BUTTON_08,				// ボタン8
		TYPE_BUTTON_09,				// ボタン9
		TYPE_BUTTON_10,				// ボタン10
		TYPE_BUTTON_11,				// ボタン11
		TYPE_BUTTON_12,				// ボタン12
		TYPE_BUTTON_13,				// ボタン13
		TYPE_BUTTON_14,				// ボタン14
		TYPE_BUTTON_15,				// ボタン15
		TYPE_BUTTON_16,				// ボタン16
		TYPE_BUTTON_17,				// ボタン17
		TYPE_BUTTON_18,				// ボタン18
		TYPE_BUTTON_19,				// ボタン19
		TYPE_MAX					// 最大値
	};

	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	InputPad( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~InputPad( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirectInput8* pDirectInput			: DirectInputオブジェクト
	// Arg    : HWND windowHandle					: ウィンドウハンドル
	//==============================================================================
	int Initialize( IDirectInput8* pDirectInput, HWND windowHandle );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirectInput8* pDirectInput			: DirectInputオブジェクト
	// Arg    : HWND windowHandle					: ウィンドウハンドル
	//==============================================================================
	int Reinitialize( IDirectInput8* pDirectInput, HWND windowHandle );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : InputPad* pOut						: コピー先アドレス
	//==============================================================================
	int Copy( InputPad* pOut ) const;

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );

	//==============================================================================
	// Brief  : プレス判定
	// Return : bool								: プレス判定
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	bool IsPress( int typeKey ) const;

	//==============================================================================
	// Brief  : トリガー判定
	// Return : bool								: トリガー判定
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	bool IsTrigger( int typeKey ) const;

	//==============================================================================
	// Brief  : リリース判定
	// Return : bool								: リリース判定
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	bool IsRelease( int typeKey ) const;

	//==============================================================================
	// Brief  : リピート判定
	// Return : bool								: リピート判定
	// Arg    : int typeKey							: 判定するキーの種類
	// Arg    : int timeBegin						: ONになるまでの時間
	// Arg    : int timeInterval					: ONになる間隔
	//==============================================================================
	bool IsRepeat( int typeKey, int timeBegin, int timeInterval ) const;

	//==============================================================================
	// Brief  : プレス時間の取得
	// Return : int									: プレス時間
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	int GetTimePress( int typeKey ) const;

	//==============================================================================
	// Brief  : 左スティックのX軸傾きの取得
	// Return : float								: 傾き割合
	// Arg    : void								: なし
	//==============================================================================
	float GetAxisLeftX( void ) const;

	//==============================================================================
	// Brief  : 左スティックのY軸傾きの取得
	// Return : float								: 傾き割合
	// Arg    : void								: なし
	//==============================================================================
	float GetAxisLeftY( void ) const;

	//==============================================================================
	// Brief  : 右スティックX軸の傾きの取得
	// Return : float								: 傾き割合
	// Arg    : void								: なし
	//==============================================================================
	float GetAxisRightX( void ) const;

	//==============================================================================
	// Brief  : 右スティックY軸の傾きの取得
	// Return : float								: 傾き割合
	// Arg    : void								: なし
	//==============================================================================
	float GetAxisRightY( void ) const;

	//==============================================================================
	// Brief  : ゲームパッド数の取得
	// Return : int									: ゲームパッド数
	// Arg    : void								: なし
	//==============================================================================
	int GetCount( void ) const;

protected:

private:
	void InitializeSelf( void );
	InputPad( const InputPad& );
	InputPad operator=( const InputPad& );
	static BOOL CALLBACK EnumDevicesCallback( const DIDEVICEINSTANCE* pDeviceInstance, VOID* pContext );
	static BOOL CALLBACK EnumDeviceObjectsCallback( const DIDEVICEOBJECTINSTANCE* pDeviceObjectInstance, VOID* pContext );

	int			countDevice_;				// デバイスの数
	int			maximumDevice_;				// デバイスの最大数
	int			maximumTiltStick_;			// スティックの最大傾斜
	int			minimumTiltStick_;			// スティックの最小傾斜
	int			maximumThresholdLeft_;		// 左スティックの最大方向敷居値
	int			maximumThresholdRight_;		// 右スティックの最大方向敷居値
	int			minimumThresholdLeft_;		// 左スティックの最小方向敷居値
	int			minimumThresholdRight_;		// 右スティックの最小方向敷居値
	DIJOYSTATE	stateJoystick_;				// ジョイスティックの状態
	bool		pState_[ TYPE_MAX ];		// キーの状態
	bool		pTrigger_[ TYPE_MAX ];		// トリガーの状態
	bool		pRelease_[ TYPE_MAX ];		// リリースの状態
	int			pRepeat_[ TYPE_MAX ];		// リピートの状態
};

#endif	// MY_INPUT_PAD_H
