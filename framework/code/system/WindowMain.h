//==============================================================================
//
// File   : WindowMain.h
// Brief  : メインウィンドウクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/09 fri : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_WINDOW_MAIN_H
#define MY_WINDOW_MAIN_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "../framework/system/Window.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class WindowMain : public Window
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	WindowMain( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~WindowMain( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : HINSTANCE instanceHandle			: インスタンスハンドル
	// Arg    : int typeShow						: 表示の種類
	// Arg    : int width							: 幅
	// Arg    : int height							: 高さ
	// Arg    : TCHAR* pCaption						: キャプション
	// Arg    : TCHAR* pNameClass					: クラス名
	//==============================================================================
	int Initialize( HINSTANCE instanceHandle, int typeShow, int width, int height, TCHAR* pCaption, TCHAR* pNameClass );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : HINSTANCE instanceHandle			: インスタンスハンドル
	// Arg    : int typeShow						: 表示の種類
	// Arg    : int width							: 幅
	// Arg    : int height							: 高さ
	// Arg    : TCHAR* pCaption						: キャプション
	// Arg    : TCHAR* pNameClass					: クラス名
	//==============================================================================
	int Reinitialize( HINSTANCE instanceHandle, int typeShow, int width, int height, TCHAR* pCaption, TCHAR* pNameClass );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : WindowMain* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( WindowMain* pOut ) const;

	//==============================================================================
	// Brief  : ウィンドウプロシージャ
	// Return : LRESULT								: 実行結果
	// Arg    : HWND windowHandle					: ウィンドウハンドル
	// Arg    : UINT message						: メッセージの識別子
	// Arg    : WPARAM wParam						: パラメータ
	// Arg    : LPARAM lParam						: パラメータ
	//==============================================================================
	LRESULT WindowProcedure( HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam );

	//==============================================================================
	// アクセサ
	//==============================================================================

protected:

private:
	void InitializeSelf( void );
	WindowMain( const WindowMain& );
	WindowMain operator=( const WindowMain& );
};

#endif	// MY_WINDOW_MAIN_H
