//==============================================================================
//
// File   : Effect.h
// Brief  : エフェクトクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/16 fri : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_EFFECT_H
#define MY_EFFECT_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class Effect
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	Effect( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~Effect( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : ID3DXEffect* pEffect				: エフェクト
	//==============================================================================
	int Initialize( ID3DXEffect* pEffect );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : ID3DXEffect* pEffect				: エフェクト
	//==============================================================================
	int Reinitialize( ID3DXEffect* pEffect );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : Effect* pOut						: コピー先アドレス
	//==============================================================================
	int Copy( Effect* pOut ) const;

	//==============================================================================
	// Brief  : ハンドルの読み込み
	// Return : int									: 実行結果
	// Arg    : int countTechnique					: テクニック数
	// Arg    : int countParameter					: パラメータ数
	//==============================================================================
	int LoadHandle( int countTechnique, int countParameter );

	//==============================================================================
	// Brief  : 開始
	// Return : void								: なし
	// Arg    : int indexTechnique					: テクニック番号
	//==============================================================================
	void Begin( int indexTechnique );

	//==============================================================================
	// Brief  : 終了
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void End( void );

	//==============================================================================
	// Brief  : テクスチャの設定
	// Return : void								: なし
	// Arg    : int indexParameter					: パラメータ番号
	// Arg    : IDirect3DBaseTexture9* pTexture		: 設定するテクスチャ
	//==============================================================================
	void SetTexture( int indexParameter, IDirect3DBaseTexture9* pTexture );

	//==============================================================================
	// Brief  : 行列の設定
	// Return : void								: なし
	// Arg    : int indexParameter					: パラメータ番号
	// Arg    : const D3DXMATRIX& matrix			: 設定する行列
	//==============================================================================
	void SetMatrix( int indexParameter, const D3DXMATRIX& matrix );

	//==============================================================================
	// Brief  : 色の設定
	// Return : void								: なし
	// Arg    : int indexParameter					: パラメータ番号
	// Arg    : const D3DXCOLOR& color				: 設定する色
	//==============================================================================
	void SetColor( int indexParameter, const D3DXCOLOR& color );

	//==============================================================================
	// Brief  : 実数の設定
	// Return : void								: なし
	// Arg    : int indexParameter					: パラメータ番号
	// Arg    : float value							: 設定する値
	//==============================================================================
	void SetFloat( int indexParameter, float value );

	//==============================================================================
	// Brief  : 実数配列の設定
	// Return : void								: なし
	// Arg    : int indexParameter					: パラメータ番号
	// Arg    : const float* pValue					: 設定する値
	// Arg    : int count							: 設定する要素数
	//==============================================================================
	void SetFloatArray( int indexParameter, const float* pValue, int count );

	//==============================================================================
	// Brief  : 整数の設定
	// Return : void								: なし
	// Arg    : int indexParameter					: パラメータ番号
	// Arg    : int value							: 設定する値
	//==============================================================================
	void SetInteger( int indexParameter, int value );

	//==============================================================================
	// Brief  : 整数配列の設定
	// Return : void								: なし
	// Arg    : int indexParameter					: パラメータ番号
	// Arg    : const int* pValue					: 設定する値
	// Arg    : int count							: 設定する要素数
	//==============================================================================
	void SetIntegerArray( int indexParameter, const int* pValue, int count );

	ID3DXEffect*	pEffect_;		// エフェクト

protected:

private:
	void InitializeSelf( void );
	Effect( const Effect& );
	Effect operator=( const Effect& );

	int			countTechnique_;		// テクニック数
	int			countParameter_;		// パラメータ数
	D3DXHANDLE*	pHandleTechnique_;		// テクニックのハンドル
	D3DXHANDLE*	pHandleParameter_;		// パラメータのハンドル
};

#endif	// MY_EFFECT_H
