//==============================================================================
//
// File   : Object.cpp
// Brief  : オブジェクトクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "Object.h"
#include "../develop/Debug.h"
#include "../develop/DebugProc.h"
#include "../graphic/Graphic.h"
#include "../system/ManagerUpdate.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************
ManagerUpdate< Object >* Object::pManagerUpdate_ = nullptr;		// 更新管理クラス

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Object::Object( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Object::~Object( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : int priority						: 更新優先度
//==============================================================================
int Object::Initialize( int priority )
{
	// エラーチェック
	Assert( pManagerUpdate_ != nullptr, _T( "更新管理クラスが登録されていません。" ) );

	// 管理クラスに自身を登録
	idUpdate_ = pManagerUpdate_->Register( this, priority );

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Object::Finalize( void )
{
	// 格納領域の開放
	delete pGraphic_;
	pGraphic_ = nullptr;

	// エラーチェック
	Assert( pManagerUpdate_ != nullptr, _T( "更新管理クラスが登録されていません。" ) );

	// 管理クラスに自身の登録解除を要請
	pManagerUpdate_->Unregister( idUpdate_ );

	// クラス内の初期化処理
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : int priority						: 更新優先度
//==============================================================================
int Object::Reinitialize( int priority )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize( priority );
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : Object* pOut						: コピー先アドレス
//==============================================================================
int Object::Copy( Object* pOut ) const
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 更新処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Object::Update( void )
{
	// ワールドマトリクスの更新
	if( needsUpdate_ || pParent_ != nullptr )
	{
		// 回転行列の作成
		D3DXMATRIX	matrixRotation;		// 回転行列
		D3DXMatrixIdentity( &matrixRotation );
		if( typeRotation_ == ROTATION_VECTOR )
		{
			D3DXMATRIX	matrixRotationVector;
			D3DXMatrixRotationYawPitchRoll( &matrixRotationVector, rotation_.y, rotation_.x, rotation_.z );
			matrixRotation *= matrixRotationVector;
		}
		if( typeRotation_ == ROTATION_MATRIX )
		{
			matrixRotation *= matrixRotation_;
		}

		// ローカル変換行列の更新
		D3DXMatrixIdentity( &matrixWorld_ );
		matrixWorld_._11 = scale_.x;
		matrixWorld_._22 = scale_.y;
		matrixWorld_._33 = scale_.z;
		matrixWorld_ *= matrixRotation;
		matrixWorld_._41 = position_.x;
		matrixWorld_._42 = position_.y;
		matrixWorld_._43 = position_.z;

		// 親の行列と合成
		if( pParent_ != nullptr )
		{
			D3DXMATRIX	matrixRotationParent;		// 親の回転行列
			pParent_->GetMatrixRotation( &matrixRotationParent );
			matrixWorld_ *= matrixRotationParent;
		}

		// 描画情報の更新
		if( pGraphic_ != nullptr )
		{
			pGraphic_->SetMatrixWorld( matrixWorld_ );
		}
	}
}

//==============================================================================
// Brief  : 描画クラスの生成
// Return : int									: 実行結果
// Arg    : int priority						: 描画優先度
//==============================================================================
int Object::CreateGraphic( int priority )
{
	// グラフィックの生成
	int		result;		// 実行結果
	pGraphic_ = new Graphic();
	if( pGraphic_ == nullptr )
	{
		return 1;
	}
	result = pGraphic_->Initialize( priority );
	if( result != 0 )
	{
		return result;
	}

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 更新管理クラスの設定
// Return : void								: なし
// Arg    : ManagerUpdate* pValue				: 設定する値
//==============================================================================
void Object::SetManagerUpdate( ManagerUpdate< Object >* pValue )
{
	// 値の設定
	pManagerUpdate_ = pValue;
}

//==============================================================================
// Brief  : 描画クラスの有効設定
// Return : void								: なし
// Arg    : bool value							: 設定する値
//==============================================================================
void Object::SetEnableGraphic( bool value )
{
	pGraphic_->SetIsEnable(value);
}

//==============================================================================
// Brief  : 親オブジェクトの設定
// Return : void								: なし
// Arg    : Object* pValue						: 設定する値
//==============================================================================
void Object::SetParent( Object* pValue )
{
	// 値の設定
	pParent_ = pValue;
}

//==============================================================================
// Brief  : 親オブジェクトの取得
// Return : Object*								: 返却する値
// Arg    : void								: なし
//==============================================================================
Object* Object::GetParent( void ) const
{
	// 値の返却
	return pParent_;
}

//==============================================================================
// Brief  : 描画クラスの設定
// Return : void								: なし
// Arg    : Graphic* pValue						: 設定する値
//==============================================================================
void Object::SetGraphic( Graphic* pValue )
{
	// 値の設定
	pGraphic_ = pValue;
}

//==============================================================================
// Brief  : 描画クラスの取得
// Return : Graphic*							: 返却する値
// Arg    : void								: なし
//==============================================================================
Graphic* Object::GetGraphic( void ) const
{
	// 値の返却
	return pGraphic_;
}

//==============================================================================
// Brief  : 座標の設定
// Return : void								: なし
// Arg    : const D3DXVECTOR3& value			: 設定する値
//==============================================================================
void Object::SetPosition( const D3DXVECTOR3& value )
{
	// 値の設定
	position_ = value;
}

//==============================================================================
// Brief  : 座標の設定
// Return : void								: なし
// Arg    : float x								: X値
// Arg    : float y								: Y値
// Arg    : float z								: Z値
//==============================================================================
void Object::SetPosition( float x, float y, float z )
{
	// 値の設定
	position_.x = x;
	position_.y = y;
	position_.z = z;
}

//==============================================================================
// Brief  : 座標のX値の設定
// Return : void								: なし
// Arg    : float x								: X値
//==============================================================================
void Object::SetPositionX( float x )
{
	// 値の設定
	position_.x = x;
}

//==============================================================================
// Brief  : 座標のY値の設定
// Return : void								: なし
// Arg    : float y								: Y値
//==============================================================================
void Object::SetPositionY( float y )
{
	// 値の設定
	position_.y = y;
}

//==============================================================================
// Brief  : 座標のZ値の設定
// Return : void								: なし
// Arg    : float z								: Z値
//==============================================================================
void Object::SetPositionZ( float z )
{
	// 値の設定
	position_.z = z;
}

//==============================================================================
// Brief  : 座標の取得
// Return : void								: なし
// Arg    : D3DXVECTOR3* pOut					: 値の格納アドレス
//==============================================================================
void Object::GetPosition( D3DXVECTOR3* pOut ) const
{
	// 値の返却
	*pOut = position_;
}

//==============================================================================
// Brief  : 座標のX値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetPositionX( void ) const
{
	// 値の返却
	return position_.x;
}

//==============================================================================
// Brief  : 座標のY値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetPositionY( void ) const
{
	// 値の返却
	return position_.y;
}

//==============================================================================
// Brief  : 座標のZ値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetPositionZ( void ) const
{
	// 値の返却
	return position_.z;
}

//==============================================================================
// Brief  : 座標の加算
// Return : void								: なし
// Arg    : const D3DXVECTOR3& value			: 加算する値
//==============================================================================
void Object::AddPosition( const D3DXVECTOR3& value )
{
	// 値の加算
	position_ += value;
}

//==============================================================================
// Brief  : 座標の加算
// Return : void								: なし
// Arg    : float x								: X値
// Arg    : float y								: Y値
// Arg    : float z								: Z値
//==============================================================================
void Object::AddPosition( float x, float y, float z )
{
	// 値の加算
	position_.x += x;
	position_.y += y;
	position_.z += z;
}

//==============================================================================
// Brief  : 座標のX値の加算
// Return : void								: なし
// Arg    : float x								: X値
//==============================================================================
void Object::AddPositionX( float x )
{
	// 値の加算
	position_.x += x;
}

//==============================================================================
// Brief  : 座標のY値の加算
// Return : void								: なし
// Arg    : float y								: Y値
//==============================================================================
void Object::AddPositionY( float y )
{
	// 値の加算
	position_.y += y;
}

//==============================================================================
// Brief  : 座標のZ値の加算
// Return : void								: なし
// Arg    : float z								: Z値
//==============================================================================
void Object::AddPositionZ( float z )
{
	// 値の加算
	position_.z += z;
}

//==============================================================================
// Brief  : 回転の種類の設定
// Return : void								: なし
// Arg    : int value							: 設定する値
//==============================================================================
void Object::SetTypeRotation( int value )
{
	// 値の設定
	typeRotation_ = value;
}

//==============================================================================
// Brief  : 回転の種類の取得
// Return : int									: 返却する値
// Arg    : void								: なし
//==============================================================================
int Object::GetTypeRotation( void ) const
{
	// 値の返却
	return typeRotation_;
}

//==============================================================================
// Brief  : 回転の設定
// Return : void								: なし
// Arg    : const D3DXVECTOR3& value			: 設定する値
//==============================================================================
void Object::SetRotation( const D3DXVECTOR3& value )
{
	// 値の設定
	rotation_ = value;
}

//==============================================================================
// Brief  : 回転の設定
// Return : void								: なし
// Arg    : float x								: X値
// Arg    : float y								: Y値
// Arg    : float z								: Z値
//==============================================================================
void Object::SetRotation( float x, float y, float z )
{
	// 値の設定
	rotation_.x = x;
	rotation_.y = y;
	rotation_.z = z;
}

//==============================================================================
// Brief  : 回転のX値の設定
// Return : void								: なし
// Arg    : float x								: X値
//==============================================================================
void Object::SetRotationX( float x )
{
	// 値の設定
	rotation_.x = x;
}

//==============================================================================
// Brief  : 回転のY値の設定
// Return : void								: なし
// Arg    : float y								: Y値
//==============================================================================
void Object::SetRotationY( float y )
{
	// 値の設定
	rotation_.y = y;
}

//==============================================================================
// Brief  : 回転のZ値の設定
// Return : void								: なし
// Arg    : float z								: Z値
//==============================================================================
void Object::SetRotationZ( float z )
{
	// 値の設定
	rotation_.z = z;
}

//==============================================================================
// Brief  : 回転の取得
// Return : void								: なし
// Arg    : D3DXVECTOR3* pOut					: 値の格納アドレス
//==============================================================================
void Object::GetRotation( D3DXVECTOR3* pOut ) const
{
	// 値の返却
	*pOut = rotation_;
}

//==============================================================================
// Brief  : 回転のX値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetRotationX( void ) const
{
	// 値の返却
	return rotation_.x;
}

//==============================================================================
// Brief  : 回転のY値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetRotationY( void ) const
{
	// 値の返却
	return rotation_.y;
}

//==============================================================================
// Brief  : 回転のZ値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetRotationZ( void ) const
{
	// 値の返却
	return rotation_.z;
}

//==============================================================================
// Brief  : 回転の加算
// Return : void								: なし
// Arg    : const D3DXVECTOR3& value			: 加算する値
//==============================================================================
void Object::AddRotation( const D3DXVECTOR3& value )
{
	// 値の加算
	rotation_ += value;
}

//==============================================================================
// Brief  : 回転の加算
// Return : void								: なし
// Arg    : float x								: X値
// Arg    : float y								: Y値
// Arg    : float z								: Z値
//==============================================================================
void Object::AddRotation( float x, float y, float z )
{
	// 値の加算
	rotation_.x += x;
	rotation_.y += y;
	rotation_.z += z;
}

//==============================================================================
// Brief  : 回転のX値の加算
// Return : void								: なし
// Arg    : float x								: X値
//==============================================================================
void Object::AddRotationX( float x )
{
	// 値の加算
	rotation_.x += x;
}

//==============================================================================
// Brief  : 回転のY値の加算
// Return : void								: なし
// Arg    : float y								: Y値
//==============================================================================
void Object::AddRotationY( float y )
{
	// 値の加算
	rotation_.y += y;
}

//==============================================================================
// Brief  : 回転のZ値の加算
// Return : void								: なし
// Arg    : float z								: Z値
//==============================================================================
void Object::AddRotationZ( float z )
{
	// 値の加算
	rotation_.z += z;
}

//==============================================================================
// Brief  : 回転クォータニオンの設定
// Return : void								: なし
// Arg    : const D3DXQUATERNION& value			: 設定する値
//==============================================================================
void Object::SetQuaternionRotation( const D3DXQUATERNION& value )
{
	// 値の設定
	quaternionRotation_ = value;
}

//==============================================================================
// Brief  : 回転クォータニオンの取得
// Return : void								: なし
// Arg    : D3DXQUATERNION* pOut				: 値の格納アドレス
//==============================================================================
void Object::GetQuaternionRotation( D3DXQUATERNION* pOut ) const
{
	// 値の返却
	*pOut = quaternionRotation_;
}

//==============================================================================
// Brief  : 回転行列の設定
// Return : void								: なし
// Arg    : const D3DXMATRIX& value				: 設定する値
//==============================================================================
void Object::SetMatrixRotation( const D3DXMATRIX& value )
{
	// 値の設定
	matrixRotation_ = value;
}

//==============================================================================
// Brief  : 回転行列の取得
// Return : void								: なし
// Arg    : D3DXMATRIX* pOut					: 値の格納アドレス
//==============================================================================
void Object::GetMatrixRotation( D3DXMATRIX* pOut ) const
{
	// 値の返却
	*pOut = matrixRotation_;
}

//==============================================================================
// Brief  : 拡縮の設定
// Return : void								: なし
// Arg    : const D3DXVECTOR3& value			: 設定する値
//==============================================================================
void Object::SetScale( const D3DXVECTOR3& value )
{
	// 値の設定
	scale_ = value;
}

//==============================================================================
// Brief  : 拡縮の設定
// Return : void								: なし
// Arg    : float x								: X値
// Arg    : float y								: Y値
// Arg    : float z								: Z値
//==============================================================================
void Object::SetScale( float x, float y, float z )
{
	// 値の設定
	scale_.x = x;
	scale_.y = y;
	scale_.z = z;
}

//==============================================================================
// Brief  : 拡縮のX値の設定
// Return : void								: なし
// Arg    : float x								: X値
//==============================================================================
void Object::SetScaleX( float x )
{
	// 値の設定
	scale_.x = x;
}

//==============================================================================
// Brief  : 拡縮のY値の設定
// Return : void								: なし
// Arg    : float y								: Y値
//==============================================================================
void Object::SetScaleY( float y )
{
	// 値の設定
	scale_.y = y;
}

//==============================================================================
// Brief  : 拡縮のZ値の設定
// Return : void								: なし
// Arg    : float z								: Z値
//==============================================================================
void Object::SetScaleZ( float z )
{
	// 値の設定
	scale_.z = z;
}

//==============================================================================
// Brief  : 拡縮の取得
// Return : void								: なし
// Arg    : D3DXVECTOR3* pOut					: 値の格納アドレス
//==============================================================================
void Object::GetScale( D3DXVECTOR3* pOut ) const
{
	// 値の返却
	*pOut = scale_;
}

//==============================================================================
// Brief  : 拡縮のX値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetScaleX( void ) const
{
	// 値の返却
	return scale_.x;
}

//==============================================================================
// Brief  : 拡縮のY値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetScaleY( void ) const
{
	// 値の返却
	return scale_.y;
}

//==============================================================================
// Brief  : 拡縮のZ値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Object::GetScaleZ( void ) const
{
	// 値の返却
	return scale_.z;
}

//==============================================================================
// Brief  : 拡縮の加算
// Return : void								: なし
// Arg    : const D3DXVECTOR3& value			: 加算する値
//==============================================================================
void Object::AddScale( const D3DXVECTOR3& value )
{
	// 値の加算
	scale_ += value;
}

//==============================================================================
// Brief  : 拡縮の加算
// Return : void								: なし
// Arg    : float x								: X値
// Arg    : float y								: Y値
// Arg    : float z								: Z値
//==============================================================================
void Object::AddScale( float x, float y, float z )
{
	// 値の加算
	scale_.x += x;
	scale_.y += y;
	scale_.z += z;
}

//==============================================================================
// Brief  : 拡縮のX値の加算
// Return : void								: なし
// Arg    : float x								: X値
//==============================================================================
void Object::AddScaleX( float x )
{
	// 値の加算
	scale_.x += x;
}

//==============================================================================
// Brief  : 拡縮のY値の加算
// Return : void								: なし
// Arg    : float y								: Y値
//==============================================================================
void Object::AddScaleY( float y )
{
	// 値の加算
	scale_.y += y;
}

//==============================================================================
// Brief  : 拡縮のZ値の加算
// Return : void								: なし
// Arg    : float z								: Z値
//==============================================================================
void Object::AddScaleZ( float z )
{
	// 値の加算
	scale_.z += z;
}

//==============================================================================
// Brief  : ワールドマトリクスの設定
// Return : void								: なし
// Arg    : const D3DXMATRIX& value				: 設定する値
//==============================================================================
void Object::SetMatrixWorld( const D3DXMATRIX& value )
{
	// 値の設定
	matrixWorld_ = value;
}

//==============================================================================
// Brief  : ワールドマトリクスの取得
// Return : void								: なし
// Arg    : D3DXMATRIX* pOut					: 値の格納アドレス
//==============================================================================
void Object::GetMatrixWorld( D3DXMATRIX* pOut ) const
{
	// 値の返却
	*pOut = matrixWorld_;
}

//==============================================================================
// Brief  : 有効フラグの設定
// Return : void								: なし
// Arg    : bool value							: 設定する値
//==============================================================================
void Object::SetIsEnable( bool value )
{
	// 値の設定
	isEnable_ = value;
}

//==============================================================================
// Brief  : 有効フラグの取得
// Return : bool								: 返却する値
// Arg    : void								: なし
//==============================================================================
bool Object::GetIsEnable( void ) const
{
	// 値の返却
	return isEnable_;
}

//==============================================================================
// Brief  : 有効フラグの判定
// Return : bool								: 判定結果
// Arg    : void								: なし
//==============================================================================
bool Object::IsEnable( void ) const
{
	// 値の返却
	return isEnable_;
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Object::InitializeSelf( void )
{
	// メンバ変数の初期化
	idUpdate_ = -1;
	pParent_ = nullptr;
	pGraphic_ = nullptr;
	position_ = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
	typeRotation_ = ROTATION_VECTOR;
	rotation_ = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
	quaternionRotation_ = D3DXQUATERNION( 0.0f, 0.0f, 0.0f, 1.0f );
	matrixRotation_ = D3DXMATRIX( 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f );
	scale_ = D3DXVECTOR3( 1.0f, 1.0f, 1.0f );
	matrixWorld_ = D3DXMATRIX( 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f );
	needsUpdate_ = true;
	isEnable_ = true;
}
