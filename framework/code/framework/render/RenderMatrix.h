//==============================================================================
//
// File   : RenderMatrix.h
// Brief  : 描画用変換行列
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_RENDER_MATRIX_H
#define MY_RENDER_MATRIX_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class RenderMatrix
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	RenderMatrix( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~RenderMatrix( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Initialize( void );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Reinitialize( void );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : RenderMatrix* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( RenderMatrix* pOut ) const;

	//==============================================================================
	// アクセサ
	//==============================================================================
	void SetMatrixView( const D3DXMATRIX& value );
	void GetMatrixView( D3DXMATRIX* pOut ) const;
	void SetMatrixProjection( const D3DXMATRIX& value );
	void GetMatrixProjection( D3DXMATRIX* pOut ) const;
	void GetMatrixViewProjection( D3DXMATRIX* pOut ) const;

protected:

private:
	void InitializeSelf( void );
	RenderMatrix( const RenderMatrix& );
	RenderMatrix operator=( const RenderMatrix& );

	D3DXMATRIX	matrixView_;				// ビューマトリクス
	D3DXMATRIX	matrixProjection_;			// プロジェクションマトリクス
	D3DXMATRIX	matrixViewProjection_;		// ビュープロジェクションマトリクス
};

#endif	// MY_RENDER_MATRIX_H
