//==============================================================================
//
// File   : Scene.cpp
// Brief  : シーンクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/11 sun : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "Scene.h"
#include "SceneArgument.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Scene::Scene( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Scene::~Scene( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : SceneArgument* pArgument			: シーン引数
//==============================================================================
int Scene::Initialize( SceneArgument* pArgument )
{
	// メンバ変数の設定
	pArgument_ = pArgument;

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Scene::Finalize( void )
{
	// クラス内部の初期化
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : SceneArgument* pArgument			: シーン引数
//==============================================================================
int Scene::Reinitialize( SceneArgument* pArgument )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize( pArgument );
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : Scene* pOut							: コピー先アドレス
//==============================================================================
int Scene::Copy( Scene* pOut ) const
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 更新処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Scene::Update( void )
{
}

//==============================================================================
// Brief  : 終了フラグの設定
// Return : void								: なし
// Arg    : bool value							: 設定する値
//==============================================================================
void Scene::SetIsEnd( bool value )
{
	// 値の設定
	isEnd_ = value;
}

//==============================================================================
// Brief  : 終了フラグの取得
// Return : bool								: 返却する値
// Arg    : void								: なし
//==============================================================================
bool Scene::GetIsEnd( void ) const
{
	// 値の返却
	return isEnd_;
}

//==============================================================================
// Brief  : 終了フラグの判定
// Return : bool								: 判定結果
// Arg    : void								: なし
//==============================================================================
bool Scene::IsEnd( void ) const
{
	// 値の返却
	return isEnd_;
}

//==============================================================================
// Brief  : 次のシーンの設定
// Return : void								: なし
// Arg    : int value							: 設定する値
//==============================================================================
void Scene::SetSceneNext( int value )
{
	// 値の設定
	sceneNext_ = value;
}

//==============================================================================
// Brief  : 次のシーンの取得
// Return : int									: 返却する値
// Arg    : void								: なし
//==============================================================================
int Scene::GetSceneNext( void ) const
{
	// 値の返却
	return sceneNext_;
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Scene::InitializeSelf( void )
{
	// メンバ変数の初期化
	pArgument_ = nullptr;
	isEnd_ = false;
	sceneNext_ = 0;
}
