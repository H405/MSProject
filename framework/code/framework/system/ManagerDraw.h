//==============================================================================
//
// File   : ManagerDraw.h
// Brief  : 描画実行クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/10 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_DRAW_H
#define MY_MANAGER_DRAW_H

//******************************************************************************
// インクルード
//******************************************************************************
#include <windows.h>
#include "d3dx9.h"
#include "ManagerExector.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class Graphic;
class RenderPass;

//******************************************************************************
// クラス定義
//******************************************************************************
template< class TypeItem >
class ManagerDraw : public ManagerExector< TypeItem >
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerDraw( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~ManagerDraw( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumItem						: 最大要素数
	// Arg    : IDirect3DDevice9* pDevice			: Direct3Dデバイス
	// Arg    : int countPass						: 描画パス数
	// Arg    : RenderPass* pRenderPass				: 描画パス
	//==============================================================================
	int Initialize( int maximumItem, IDirect3DDevice9* pDevice, int countPass, RenderPass* pRenderPass );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumItem						: 最大要素数
	// Arg    : IDirect3DDevice9* pDevice			: Direct3Dデバイス
	// Arg    : int countPass						: 描画パス数
	// Arg    : RenderPass* pRenderPass				: 描画パス
	//==============================================================================
	int Reinitialize( int maximumItem, IDirect3DDevice9* pDevice, int countPass, RenderPass* pRenderPass );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerDraw* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( ManagerDraw* pOut ) const;

	//==============================================================================
	// Brief  : 実行
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Execute( void );

protected:

private:
	void InitializeSelf( void );
	ManagerDraw( const ManagerDraw& );
	ManagerDraw operator=( const ManagerDraw& );

	IDirect3DDevice9*	pDevice_;					// Direct3Dデバイス
	int					maximumRenderTarget_;		// 最大レンダーターゲット数
	int					countPass_;					// 描画パス数
	RenderPass*			pRenderPass_;				// 描画パス
};

#endif	// MY_MANAGER_DRAW_H
