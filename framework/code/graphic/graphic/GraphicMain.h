//==============================================================================
//
// File   : GraphicMain.h
// Brief  : 描画処理の管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/17 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_GRAPHIC_MAIN_H
#define MY_GRAPHIC_MAIN_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "../../framework/graphic/graphic.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class Polygon2D;
class Polygon3D;

//******************************************************************************
// クラス定義
//******************************************************************************
class GraphicMain : public Graphic
{
public:
	// パス
	enum
	{
		PASS_3D = 0,		// 3D描画
		PASS_2D,			// 2D描画
		PASS_SCREEN,		// 画面描画
		PASS_MAX			// 最大数
	};

	// 3D描画
	enum
	{
		PASS_3D_RENDER_COLOR = 0,			// 色
		PASS_3D_RENDER_NORMAL_DEPTH,		// 法線・深度値
		PASS_3D_RENDER_LUMINANCE,			// 輝度
		PASS_3D_RENDER_MAX					// 最大値
	};

	// 2D描画
	enum
	{
		PASS_2D_RENDER_COLOR = 0,			// 色
		PASS_2D_RENDER_MASK,				// マスク
		PASS_2D_RENDER_MAX					// 最大値
	};

	// 画面描画
	enum
	{
		PASS_SCREEN_RENDER_COLOR = 0,		// 色
		PASS_SCREEN_RENDER_MAX				// 最大値
	};

	// ディレクショナルライト
	enum
	{
		LIGHT_DIRECTIONAL_GENERAL = 0,		// 通常ライト
		LIGHT_DIRECTIONAL_MAX				// 最大値
	};

	// ポイントライト
	enum
	{
		LIGHT_POINT_MAX = 0		// 最大値
	};

	// カメラ
	enum
	{
		CAMERA_GENERAL = 0,		// 通常カメラ
		CAMERA_MAX				// 最大値
	};

	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	GraphicMain( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~GraphicMain( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int priority						: 描画優先度
	//==============================================================================
	int Initialize( int priority );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int priority						: 描画優先度
	//==============================================================================
	int Reinitialize( int priority );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : GraphicMain* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( GraphicMain* pOut ) const;
	
	//==============================================================================
	// Brief  : 2Dポリゴンクラスの設定
	// Return : void								: なし
	// Arg    : Polygon2D* pValue					: 設定する値
	//==============================================================================
	static void SetPolygon2D( Polygon2D* pValue );

	//==============================================================================
	// Brief  : 3Dポリゴンクラスの設定
	// Return : void								: なし
	// Arg    : Polygon3D* pValue					: 設定する値
	//==============================================================================
	static void SetPolygon3D( Polygon3D* pValue );

protected:
	static Polygon2D*	pPolygon2D_;		// 2Dポリゴン
	static Polygon3D*	pPolygon3D_;		// 3Dポリゴン

private:
	void InitializeSelf( void );
	GraphicMain( const GraphicMain& );
	GraphicMain operator=( const GraphicMain& );
};

#endif	// MY_GRAPHIC_MAIN_H
