//==============================================================================
//
// File   : ManagerFire.h
// Brief  : 火花管理オブジェクトクラス
// Author : Kotaro Nagasaki
// Date   : 2015/10/29 Tur : Kotaro Nagasaki : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_FIRE_H
#define MY_MANAGER_FIRE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "fire/Fire.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************
#define FIRE_MAX (320)

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class Fire;
class ManagerPoint;
class FireState;

//******************************************************************************
// クラス定義
//******************************************************************************
class ManagerFire
{
public:
	enum
	{
		STATE_NORMAL = 0,
		STATE_SLOW,
		STATE_MAX
	}STATE;

	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerFire( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~ManagerFire( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	//==============================================================================
	int Initialize(ManagerPoint* _managerPoint);

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( int* _table , int* _fireTableIndex);

	//==============================================================================
	// Brief  : 火花発射処理
	// Return : int								: 配列番号
	// Arg    : int indexState						: ステート番号
	// Arg   : ManagerPoint*						: ポイントスプライト生成用マネージャ
	// Arg   : D3DXVECTOR3							: 発生位置
	// Arg   : D3DXVECTOR3							: 速度
	// Arg   : float								: 更新ごとの回転量
	// Arg   : float								: ↑に加算する回転量（大きすぎると変になるから注意）
	//==============================================================================
	int Add(
		int _indexState,
		ManagerPoint* _managerPoint,
		D3DXVECTOR3 _pos,
		D3DXVECTOR3 _speed,
		float _rot,
		float _rotSpeed);

	//==============================================================================
	// Brief  : インデックス取得処理
	// Return : int									: 使用可能なオブジェクトの番号（全部使用中の場合は負の値が返る）
	// Arg    : void								: なし
	//==============================================================================
	int GetIndex();

	//==============================================================================
	// Brief  : 火花の爆発処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Burn();

	//==============================================================================
	// Brief  : テーブルのソート処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Sort(int* _table, int _deleteIndex);

	//==============================================================================
	// アクセサ
	//==============================================================================
	Fire* getFire(int _index){return &fire[_index];}

protected:

	//	火花の配列
	Fire* fire;

	//	火花の自然消滅認識用フラグ
	bool enableOld[FIRE_MAX];

	// ステートテーブル
	FireState* ppState_[ STATE_MAX ];

	//	火花ポインタ格納用リスト
	Fire** fireList;
private:

	ManagerPoint* managerPoint;

	void InitializeSelf( void );
	ManagerFire( const ManagerFire& );
	ManagerFire operator=( const ManagerFire& );
};

#endif	// MY_MANAGER_FIRE_H