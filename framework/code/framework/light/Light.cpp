//==============================================================================
//
// File   : Light.cpp
// Brief  : ライトクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "Light.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Light::Light( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Light::~Light( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Light::Initialize( void )
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Light::Finalize( void )
{
	// クラス内の初期化処理
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Light::Reinitialize( void )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize();
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : Light* pOut							: コピー先アドレス
//==============================================================================
int Light::Copy( Light* pOut ) const
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 使用
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Light::Use( void )
{
	// 使用フラグをONにする
	isUsed_ = true;
}

//==============================================================================
// Brief  : 開放
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Light::Release( void )
{
	// 使用フラグをOFFにする
	isUsed_ = false;
}

//==============================================================================
// Brief  : 設定
// Return : void								: なし
// Arg    : const D3DXCOLOR& diffuse			: ディフューズカラー
// Arg    : const D3DXCOLOR& specular			: スペキュラカラー
//==============================================================================
void Light::Set( const D3DXCOLOR& diffuse, const D3DXCOLOR& specular )
{
	// メンバ変数の設定
	diffuse_ = diffuse;
	specular_ = specular;
}

//==============================================================================
// Brief  : ディフューズカラーの設定
// Return : void								: なし
// Arg    : const D3DXCOLOR& value				: 設定する値
//==============================================================================
void Light::SetDiffuse( const D3DXCOLOR& value )
{
	// 値の設定
	diffuse_ = value;
}

//==============================================================================
// Brief  : ディフューズカラーのRGBA値の設定
// Return : void								: なし
// Arg    : float r								: R値
// Arg    : float g								: G値
// Arg    : float b								: B値
// Arg    : float a								: A値
//==============================================================================
void Light::SetDiffuse( float r, float g, float b, float a )
{
	// 値の設定
	diffuse_.r = r;
	diffuse_.g = g;
	diffuse_.b = b;
	diffuse_.a = a;
}

//==============================================================================
// Brief  : ディフューズカラーのRGB値の設定
// Return : void								: なし
// Arg    : float r								: R値
// Arg    : float g								: G値
// Arg    : float b								: B値
//==============================================================================
void Light::SetDiffuse( float r, float g, float b )
{
	// 値の設定
	diffuse_.r = r;
	diffuse_.g = g;
	diffuse_.b = b;
}

//==============================================================================
// Brief  : ディフューズカラーのR値の設定
// Return : void								: なし
// Arg    : float r								: R値
//==============================================================================
void Light::SetDiffuseR( float r )
{
	// 値の設定
	diffuse_.r = r;
}

//==============================================================================
// Brief  : ディフューズカラーのG値の設定
// Return : void								: なし
// Arg    : float g								: G値
//==============================================================================
void Light::SetDiffuseG( float g )
{
	// 値の設定
	diffuse_.g = g;
}

//==============================================================================
// Brief  : ディフューズカラーのB値の設定
// Return : void								: なし
// Arg    : float b								: B値
//==============================================================================
void Light::SetDiffuseB( float b )
{
	// 値の設定
	diffuse_.b = b;
}

//==============================================================================
// Brief  : ディフューズカラーのA値の設定
// Return : void								: なし
// Arg    : float a								: A値
//==============================================================================
void Light::SetDiffuseA( float a )
{
	// 値の設定
	diffuse_.a = a;
}

//==============================================================================
// Brief  : ディフューズカラーのアルファ値の設定
// Return : void								: なし
// Arg    : float alpha							: アルファ値
//==============================================================================
void Light::SetDiffuseAlpha( float alpha )
{
	// 値の設定
	diffuse_.a = alpha;
}

//==============================================================================
// Brief  : ディフューズカラーの取得
// Return : void								: なし
// Arg    : D3DXCOLOR* pOut						: 値の格納アドレス
//==============================================================================
void Light::GetDiffuse( D3DXCOLOR* pOut ) const
{
	// 値の返却
	*pOut = diffuse_;
}

//==============================================================================
// Brief  : ディフューズカラーのR値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetDiffuseR( void ) const
{
	// 値の返却
	return diffuse_.r;
}

//==============================================================================
// Brief  : ディフューズカラーのG値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetDiffuseG( void ) const
{
	// 値の返却
	return diffuse_.g;
}

//==============================================================================
// Brief  : ディフューズカラーのB値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetDiffuseB( void ) const
{
	// 値の返却
	return diffuse_.b;
}

//==============================================================================
// Brief  : ディフューズカラーのA値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetDiffuseA( void ) const
{
	// 値の返却
	return diffuse_.a;
}

//==============================================================================
// Brief  : スペキュラカラーの設定
// Return : void								: なし
// Arg    : const D3DXCOLOR& value				: 設定する値
//==============================================================================
void Light::SetSpecular( const D3DXCOLOR& value )
{
	// 値の設定
	specular_ = value;
}

//==============================================================================
// Brief  : スペキュラカラーのRGBA値の設定
// Return : void								: なし
// Arg    : float r								: R値
// Arg    : float g								: G値
// Arg    : float b								: B値
// Arg    : float a								: A値
//==============================================================================
void Light::SetSpecular( float r, float g, float b, float a )
{
	// 値の設定
	specular_.r = r;
	specular_.g = g;
	specular_.b = b;
	specular_.a = a;
}

//==============================================================================
// Brief  : スペキュラカラーのRGB値の設定
// Return : void								: なし
// Arg    : float r								: R値
// Arg    : float g								: G値
// Arg    : float b								: B値
//==============================================================================
void Light::SetSpecular( float r, float g, float b )
{
	// 値の設定
	specular_.r = r;
	specular_.g = g;
	specular_.b = b;
}

//==============================================================================
// Brief  : スペキュラカラーのR値の設定
// Return : void								: なし
// Arg    : float r								: R値
//==============================================================================
void Light::SetSpecularR( float r )
{
	// 値の設定
	specular_.r = r;
}

//==============================================================================
// Brief  : スペキュラカラーのG値の設定
// Return : void								: なし
// Arg    : float g								: G値
//==============================================================================
void Light::SetSpecularG( float g )
{
	// 値の設定
	specular_.g = g;
}

//==============================================================================
// Brief  : スペキュラカラーのB値の設定
// Return : void								: なし
// Arg    : float b								: B値
//==============================================================================
void Light::SetSpecularB( float b )
{
	// 値の設定
	specular_.b = b;
}

//==============================================================================
// Brief  : スペキュラカラーのA値の設定
// Return : void								: なし
// Arg    : float a								: A値
//==============================================================================
void Light::SetSpecularA( float a )
{
	// 値の設定
	specular_.a = a;
}

//==============================================================================
// Brief  : スペキュラカラーのアルファ値の設定
// Return : void								: なし
// Arg    : float alpha							: アルファ値
//==============================================================================
void Light::SetSpecularAlpha( float alpha )
{
	// 値の設定
	specular_.a = alpha;
}

//==============================================================================
// Brief  : スペキュラカラーの取得
// Return : void								: なし
// Arg    : D3DXCOLOR* pOut						: 値の格納アドレス
//==============================================================================
void Light::GetSpecular( D3DXCOLOR* pOut ) const
{
	// 値の返却
	*pOut = specular_;
}

//==============================================================================
// Brief  : スペキュラカラーのR値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetSpecularR( void ) const
{
	// 値の返却
	return specular_.r;
}

//==============================================================================
// Brief  : スペキュラカラーのG値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetSpecularG( void ) const
{
	// 値の返却
	return specular_.g;
}

//==============================================================================
// Brief  : スペキュラカラーのB値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetSpecularB( void ) const
{
	// 値の返却
	return specular_.b;
}

//==============================================================================
// Brief  : スペキュラカラーのA値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float Light::GetSpecularA( void ) const
{
	// 値の返却
	return specular_.a;
}

//==============================================================================
// Brief  : 有効フラグの設定
// Return : void								: なし
// Arg    : bool value							: 設定する値
//==============================================================================
void Light::SetIsEnable( bool value )
{
	// 値の設定
	isEnable_ = value;
}

//==============================================================================
// Brief  : 有効フラグの取得
// Return : bool								: 返却する値
// Arg    : void								: なし
//==============================================================================
bool Light::GetIsEnable( void ) const
{
	// 値の返却
	return isEnable_;
}

//==============================================================================
// Brief  : 有効フラグの判定
// Return : bool								: 判定結果
// Arg    : void								: なし
//==============================================================================
bool Light::IsEnable( void ) const
{
	// 値の返却
	return isEnable_;
}

//==============================================================================
// Brief  : 使用フラグの取得
// Return : bool								: 返却する値
// Arg    : void								: なし
//==============================================================================
bool Light::GetIsUsed( void ) const
{
	// 値の返却
	return isUsed_;
}

//==============================================================================
// Brief  : 使用フラグの判定
// Return : bool								: 判定結果
// Arg    : void								: なし
//==============================================================================
bool Light::IsUsed( void ) const
{
	// 値の返却
	return isUsed_;
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Light::InitializeSelf( void )
{
	// メンバ変数の初期化
	diffuse_ = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
	specular_ = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
	isEnable_ = true;
	isUsed_ = false;
}
