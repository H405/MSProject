//==============================================================================
//
// File   : Fade.h
// Brief  : フェード管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_FADE_H
#define MY_FADE_H

//******************************************************************************
// インクルード
//******************************************************************************

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class Fade
{
public:
	// フェードの状態
	enum
	{
		STATE_NONE = 0,		// なし
		STATE_IN_WHILE,		// フェードイン中
		STATE_IN_END,		// フェードイン終了
		STATE_IN_AFTER,		// フェードイン後
		STATE_OUT_WHILE,	// フェードアウト中
		STATE_OUT_END,		// フェードアウト終了
		STATE_OUT_AFTER,	// フェードアウト後
		STATE_MAX			// 最大値
	};

	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	Fade( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~Fade( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Initialize( void );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Reinitialize( void );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : Fade* pOut							: コピー先アドレス
	//==============================================================================
	int Copy( Fade* pOut ) const;

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );

	//==============================================================================
	// Brief  : フェードイン
	// Return : void								: なし
	// Arg    : int time							: フェードに掛かる時間
	//==============================================================================
	void FadeIn( int time );

	//==============================================================================
	// Brief  : フェードアウト
	// Return : void								: なし
	// Arg    : int time							: フェードにかかる時間
	//==============================================================================
	void FadeOut( int time );

	//==============================================================================
	// Brief  : フェード割合の取得
	// Return : float								: フェード割合
	// Arg    : void								: なし
	//==============================================================================
	float GetProportion( void );

	//==============================================================================
	// アクセサ
	//==============================================================================
	int GetState( void ) const;

protected:

private:
	void InitializeSelf( void );
	Fade( const Fade& );
	Fade operator=( const Fade& );

	float	proportion_;		// フェード割合
	int		timeFade_;			// フェードにかかる時間
	int		timePast_;			// 経過時間
	int		state_;				// フェード状態
	bool	isFading_;			// フェード中フラグ
};

#endif	// MY_FADE_H
