//==============================================================================
//
// File   : RenderMatrix.cpp
// Brief  : 描画用変換行列
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "RenderMatrix.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
RenderMatrix::RenderMatrix( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
RenderMatrix::~RenderMatrix( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int RenderMatrix::Initialize( void )
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int RenderMatrix::Finalize( void )
{
	// クラス内の初期化処理
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int RenderMatrix::Reinitialize( void )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize();
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : RenderMatrix* pOut					: コピー先アドレス
//==============================================================================
int RenderMatrix::Copy( RenderMatrix* pOut ) const
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : ビューマトリクスの設定
// Return : void								: なし
// Arg    : const D3DXMATRIX& value				: 設定する値
//==============================================================================
void RenderMatrix::SetMatrixView( const D3DXMATRIX& value )
{
	// 値の設定
	matrixView_ = value;

	// 計算結果を保存
	matrixViewProjection_ = matrixView_ * matrixProjection_;
}

//==============================================================================
// Brief  : ビューマトリクスの取得
// Return : void								: なし
// Arg    : D3DXMATRIX* pOut					: 値の格納アドレス
//==============================================================================
void RenderMatrix::GetMatrixView( D3DXMATRIX* pOut ) const
{
	// 値の返却
	*pOut = matrixView_;
}

//==============================================================================
// Brief  : プロジェクションマトリクスの設定
// Return : void								: なし
// Arg    : const D3DXMATRIX& value				: 設定する値
//==============================================================================
void RenderMatrix::SetMatrixProjection( const D3DXMATRIX& value )
{
	// 値の設定
	matrixProjection_ = value;

	// 計算結果を保存
	D3DXMatrixMultiply( &matrixViewProjection_, &matrixView_, &matrixProjection_ );
}

//==============================================================================
// Brief  : プロジェクションマトリクスの取得
// Return : void								: なし
// Arg    : D3DXMATRIX* pOut					: 値の格納アドレス
//==============================================================================
void RenderMatrix::GetMatrixProjection( D3DXMATRIX* pOut ) const
{
	// 値の返却
	*pOut = matrixProjection_;
}

//==============================================================================
// Brief  : ビュープロジェクションマトリクスの取得
// Return : void								: なし
// Arg    : D3DXMATRIX* pOut					: 値の格納アドレス
//==============================================================================
void RenderMatrix::GetMatrixViewProjection( D3DXMATRIX* pOut ) const
{
	// 値の返却
	*pOut = matrixViewProjection_;
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void RenderMatrix::InitializeSelf( void )
{
	// メンバ変数の初期化
	matrixView_ = D3DXMATRIX( 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f );
	matrixProjection_ = D3DXMATRIX( 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f );
	matrixViewProjection_ = D3DXMATRIX( 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f );
}
