//==============================================================================
//
// File   : LightDirection.cpp
// Brief  : ディレクショナルライトクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "LightDirection.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
LightDirection::LightDirection( void ) : Light()
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
LightDirection::~LightDirection( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : D3DXCOLOR diffuse					: ディフューズカラー
// Arg    : D3DXCOLOR specular					: スペキュラカラー
// Arg    : const D3DXVECTOR3& vector			: 向いているベクトル
//==============================================================================
int LightDirection::Initialize( D3DXCOLOR diffuse, D3DXCOLOR specular, const D3DXVECTOR3& vector )
{
	// 基本クラスの処理
	int		result;		// 実行結果
	result = Light::Initialize( diffuse, specular );
	if( result != 0 )
	{
		return result;
	}

	// メンバ変数の設定
	D3DXVec3Normalize( &vector_, &vector );

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int LightDirection::Finalize( void )
{
	// 基本クラスの処理
	int		result;		// 実行結果
	result = Light::Finalize();
	if( result != 0 )
	{
		return result;
	}

	// クラス内の初期化処理
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : D3DXCOLOR diffuse					: ディフューズカラー
// Arg    : D3DXCOLOR specular					: スペキュラカラー
// Arg    : const D3DXVECTOR3& vector			: 向いているベクトル
//==============================================================================
int LightDirection::Reinitialize( D3DXCOLOR diffuse, D3DXCOLOR specular, const D3DXVECTOR3& vector )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize( diffuse, specular, vector );
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : LightDirection* pOut				: コピー先アドレス
//==============================================================================
int LightDirection::Copy( LightDirection* pOut ) const
{
	// 基本クラスの処理
	int		result;		// 実行結果
	result = Light::Copy( pOut );
	if( result != 0 )
	{
		return result;
	}

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 向いているベクトルの設定
// Return : void								: なし
// Arg    : const D3DXVECTOR3& value			: 設定する値
//==============================================================================
void LightDirection::SetVector( const D3DXVECTOR3& value )
{
	// 値の設定
	D3DXVec3Normalize( &vector_, &value );
}

//==============================================================================
// Brief  : 向いているベクトルの設定
// Return : void								: なし
// Arg    : float x								: X値
// Arg    : float y								: Y値
// Arg    : float z								: Z値
//==============================================================================
void LightDirection::SetVector( float x, float y, float z )
{
	// 値の設定
	D3DXVECTOR3	value( x, y, z );
	D3DXVec3Normalize( &vector_, &value );
}

//==============================================================================
// Brief  : 向いているベクトルのX値の設定
// Return : void								: なし
// Arg    : float x								: X値
//==============================================================================
void LightDirection::SetVectorX( float x )
{
	// 値の設定
	vector_.x = x;
}

//==============================================================================
// Brief  : 向いているベクトルのY値の設定
// Return : void								: なし
// Arg    : float y								: Y値
//==============================================================================
void LightDirection::SetVectorY( float y )
{
	// 値の設定
	vector_.y = y;
}

//==============================================================================
// Brief  : 向いているベクトルのZ値の設定
// Return : void								: なし
// Arg    : float z								: Z値
//==============================================================================
void LightDirection::SetVectorZ( float z )
{
	// 値の設定
	vector_.z = z;
}

//==============================================================================
// Brief  : 向いているベクトルの取得
// Return : void								: なし
// Arg    : D3DXVECTOR3* pOut					: 値の格納アドレス
//==============================================================================
void LightDirection::GetVector( D3DXVECTOR3* pOut ) const
{
	// 値の返却
	*pOut = vector_;
}

//==============================================================================
// Brief  : 向いているベクトルのX値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float LightDirection::GetVectorX( void ) const
{
	// 値の返却
	return vector_.x;
}

//==============================================================================
// Brief  : 向いているベクトルのY値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float LightDirection::GetVectorY( void ) const
{
	// 値の返却
	return vector_.y;
}

//==============================================================================
// Brief  : 向いているベクトルのZ値の取得
// Return : float								: 返却する値
// Arg    : void								: なし
//==============================================================================
float LightDirection::GetVectorZ( void ) const
{
	// 値の返却
	return vector_.z;
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void LightDirection::InitializeSelf( void )
{
	// メンバ変数の初期化
	vector_ = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
}
