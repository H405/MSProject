//==============================================================================
//
// File   : InputMouse.h
// Brief  : マウス入力クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/11 sun : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_INPUT_MOUSE_H
#define MY_INPUT_MOUSE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "Input.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************

//******************************************************************************
// クラス定義
//******************************************************************************
class InputMouse : public Input
{
public:
	// キーの種類
	enum
	{
		TYPE_LEFT = 0,		// 左ボタン
		TYPE_MIDDLE,		// 中央ボタン
		TYPE_RIGHT,			// 右ボタン
		TYPE_MAX			// 最大値
	};

	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	InputMouse( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~InputMouse( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirectInput8* pDirectInput			: DirectInputオブジェクト
	// Arg    : HWND windowHandle					: ウィンドウハンドル
	// Arg    : int widthScreen						: スクリーン幅
	// Arg    : int heightScreen					: スクリーン高さ
	//==============================================================================
	int Initialize( IDirectInput8* pDirectInput, HWND windowHandle, int widthScreen, int heightScreen );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : IDirectInput8* pDirectInput			: DirectInputオブジェクト
	// Arg    : HWND windowHandle					: ウィンドウハンドル
	// Arg    : int widthScreen						: スクリーン幅
	// Arg    : int heightScreen					: スクリーン高さ
	//==============================================================================
	int Reinitialize( IDirectInput8* pDirectInput, HWND windowHandle, int widthScreen, int heightScreen );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : InputMouse* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( InputMouse* pOut ) const;

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );

	//==============================================================================
	// Brief  : プレス判定
	// Return : bool								: プレス判定
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	bool IsPress( int typeKey ) const;

	//==============================================================================
	// Brief  : トリガー判定
	// Return : bool								: トリガー判定
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	bool IsTrigger( int typeKey ) const;

	//==============================================================================
	// Brief  : リリース判定
	// Return : bool								: リリース判定
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	bool IsRelease( int typeKey ) const;

	//==============================================================================
	// Brief  : リピート判定
	// Return : bool								: リピート判定
	// Arg    : int typeKey							: 判定するキーの種類
	// Arg    : int timeBegin						: ONになるまでの時間
	// Arg    : int timeInterval					: ONになる間隔
	//==============================================================================
	bool IsRepeat( int typeKey, int timeBegin, int timeInterval ) const;

	//==============================================================================
	// Brief  : プレス時間の取得
	// Return : int									: プレス時間
	// Arg    : int typeKey							: 判定するキーの種類
	//==============================================================================
	int GetTimePress( int typeKey ) const;

	//==============================================================================
	// Brief  : カーソルの表示
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Show( void );

	//==============================================================================
	// Brief  : カーソルの非表示
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Hide( void );

	//==============================================================================
	// Brief  : X座標の取得
	// Return : int									: X座標
	// Arg    : void								: なし
	//==============================================================================
	int GetPositionX( void ) const;

	//==============================================================================
	// Brief  : Y座標の取得
	// Return : int									: Y座標
	// Arg    : void								: なし
	//==============================================================================
	int GetPositionY( void ) const;

	//==============================================================================
	// Brief  : ウィンドウX座標の取得
	// Return : int									: X座標
	// Arg    : void								: なし
	//==============================================================================
	int GetPositionWindowX( void ) const;

	//==============================================================================
	// Brief  : ウィンドウY座標の取得
	// Return : int									: Y座標
	// Arg    : void								: なし
	//==============================================================================
	int GetPositionWindowY( void ) const;

	//==============================================================================
	// Brief  : X移動値の取得
	// Return : int									: X移動値
	// Arg    : void								: なし
	//==============================================================================
	int GetMoveX( void ) const;

	//==============================================================================
	// Brief  : Y移動値の取得
	// Return : int									: Y移動値
	// Arg    : void								: なし
	//==============================================================================
	int GetMoveY( void ) const;

	//==============================================================================
	// Brief  : ホイール移動値の取得
	// Return : int									: ホイール移動値
	// Arg    : void								: なし
	//==============================================================================
	int GetMoveWheel( void ) const;

protected:

private:
	void InitializeSelf( void );
	InputMouse( const InputMouse& );
	InputMouse operator=( const InputMouse& );

	HWND	windowHandle_;				// ウィンドウハンドル
	int		widthScreen_;				// スクリーン幅
	int		heightScreen_;				// スクリーン高さ
	POINT	position_;					// カーソルの座標
	POINT	positionWindow_;			// カーソルのウィンドウ座標
	POINT	vectorMove_;				// カーソルの移動値
	int		moveWheel_;					// ホイールの移動値
	BYTE	pState_[ TYPE_MAX ];		// キーの状態
	bool	pTrigger_[ TYPE_MAX ];		// トリガーの状態
	bool	pRelease_[ TYPE_MAX ];		// リリースの状態
	int		pRepeat_[ TYPE_MAX ];		// リピートの状態
};

#endif	// MY_INPUT_MOUSE_H
