//==============================================================================
//
// File   : Scene.h
// Brief  : シーンクラス
// Author : Taiga Shirakawa
// Date   : 2015/10/11 sun : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_SCENE_H
#define MY_SCENE_H

//******************************************************************************
// インクルード
//******************************************************************************

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class SceneArgument;

//******************************************************************************
// クラス定義
//******************************************************************************
class Scene
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	Scene( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	virtual ~Scene( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : SceneArgument* pArgument			: シーン引数
	//==============================================================================
	virtual int Initialize( SceneArgument* pArgument );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	virtual int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : SceneArgument* pArgument			: シーン引数
	//==============================================================================
	virtual int Reinitialize( SceneArgument* pArgument );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : Scene* pOut							: コピー先アドレス
	//==============================================================================
	int Copy( Scene* pOut ) const;

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	virtual void Update( void );

	//==============================================================================
	// アクセサ
	//==============================================================================
	void SetIsEnd( bool value );
	bool GetIsEnd( void ) const;
	bool IsEnd( void ) const;
	void SetSceneNext( int value );
	int GetSceneNext( void ) const;

protected:
	SceneArgument*	pArgument_;		// シーン引数

private:
	virtual void InitializeSelf( void );
	Scene( const Scene& );
	Scene operator=( const Scene& );

	bool	isEnd_;			// 終了フラグ
	int		sceneNext_;		// 次のシーン
};

#endif	// MY_SCENE_H
