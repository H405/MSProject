//==============================================================================
//
// File   : ManagerLight.h
// Brief  : ライト管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/11/14 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_LIGHT_H
#define MY_MANAGER_LIGHT_H

//******************************************************************************
// インクルード
//******************************************************************************

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class LightPoint;
class LightDirection;

//******************************************************************************
// クラス定義
//******************************************************************************
class ManagerLight
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerLight( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~ManagerLight( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumDirection				: 最大ディレクショナルライト数
	// Arg    : int maximumPoint					: 最大ポイントライト数
	//==============================================================================
	int Initialize( int maximumDirection, int maximumPoint );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int maximumDirection				: 最大ディレクショナルライト数
	// Arg    : int maximumPoint					: 最大ポイントライト数
	//==============================================================================
	int Reinitialize( int maximumDirection, int maximumPoint );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : ManagerLight* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( ManagerLight* pOut ) const;

	//==============================================================================
	// Brief  : ディレクショナルライトの取得
	// Return : LightDirection*						: ディレクショナルライト
	// Arg    : void								: なし
	//==============================================================================
	LightDirection* GetLightDirection( void );

	//==============================================================================
	// Brief  : ポイントライトの取得
	// Return : LightPoint*							: ポイントライト
	// Arg    : void								: なし
	//==============================================================================
	LightPoint* GetLightPoint( void );

	//==============================================================================
	// Brief  : ディレクショナルライト数の取得
	// Return : int									: ディレクショナルライト数
	// Arg    : void								: なし
	//==============================================================================
	int GetCountLightDirection( void );

	//==============================================================================
	// Brief  : ポイントライト数の取得
	// Return : int									: ポイントライト数
	// Arg    : void								: なし
	//==============================================================================
	int GetCountLightPoint( void );

	//==============================================================================
	// Brief  : 有効なディレクショナルライトの取得
	// Return : LightDirection*						: ディレクショナルライト
	// Arg    : int index							: 番号
	//==============================================================================
	LightDirection* GetLightDirectionEnable( int index );

	//==============================================================================
	// Brief  : 有効なポイントライトの取得
	// Return : LightPoint*							: ポイントライト
	// Arg    : int index							: 番号
	//==============================================================================
	LightPoint* GetLightPointEnable( int index );

protected:

private:
	void InitializeSelf( void );
	ManagerLight( const ManagerLight& );
	ManagerLight operator=( const ManagerLight& );

	int				maximumDirection_;		// 最大ディレクショナルライト数
	int				maximumPoint_;			// 最大ポイントライト数
	LightDirection*	pLightDirection_;		// ディレクショナルライト
	LightPoint*		pLightPoint_;			// ポイントライト
};

#endif	// MY_MANAGER_LIGHT_H
