//==============================================================================
//
// File   : ManagerFireworks.h
// Brief  : 花火管理オブジェクトクラス
// Author : Kotaro Nagasaki
// Date   : 2015/10/29 Tur : Kotaro Nagasaki : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_MANAGER_FIREWORKS_H
#define MY_MANAGER_FIREWORKS_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "../framework/object/ObjectMovement.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************
#define FIREWORKS_MAX (16)

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class ManagerFireworks;
class Fireworks;
class ManagerPoint;

//******************************************************************************
// クラス定義
//******************************************************************************
class ManagerFireworks
{
public:
	enum
	{
		STATE_NORMAL = 0,
		STATE_MAX
	}STATE;

	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	ManagerFireworks( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~ManagerFireworks( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	//==============================================================================
	int Initialize(ManagerPoint* _managerPoint);

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 更新処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Update( void );

	//==============================================================================
	// Brief  : 花火発射処理
	// Return : void								: なし
	// Arg1   : ManagerPoint*						: ポイントスプライト生成用マネージャ
	// Arg2   : D3DXVECTOR3							: 発生位置
	// Arg3   : D3DXVECTOR3							: 速度
	// Arg4   : float								: 更新ごとの回転量
	// Arg5   : float								: ↑に加算する回転量（大きすぎると変になるから注意）
	//==============================================================================
	void Add(
		ManagerPoint* _managerPoint,
		D3DXVECTOR3 _pos,
		D3DXVECTOR3 _speed,
		float _rot,
		float _rotSpeed);

	//==============================================================================
	// Brief  : インデックス取得処理
	// Return : int									: 使用可能なオブジェクトの番号（全部使用中の場合は負の値が返る）
	// Arg    : void								: なし
	//==============================================================================
	int GetIndex();

	//==============================================================================
	// Brief  : 花火の爆発処理
	// Return : void								: なし
	// Arg    : void								: なし
	//==============================================================================
	void Burn();

	//==============================================================================
	// アクセサ
	//==============================================================================

protected:

	//	花火の配列
	Fireworks* fireworks;

	//	爆発させる花火
	int burnIndex;

private:

	ManagerPoint* managerPoint;

	void InitializeSelf( void );
	ManagerFireworks( const ManagerFireworks& );
	ManagerFireworks operator=( const ManagerFireworks& );
};

#endif	// MY_MANAGER_FIREWORKS_H
