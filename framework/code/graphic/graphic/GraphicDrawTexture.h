//==============================================================================
//
// File   : GraphicDrawTexture.h
// Brief  : デバッグテクスチャ描画処理の管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/11/27 fri : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_GRAPHIC_DRAW_TEXTURE_H
#define MY_GRAPHIC_DRAW_TEXTURE_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "GraphicMain.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class EffectParameter;
class Effect;

//******************************************************************************
// クラス定義
//******************************************************************************
class GraphicDrawTexture : public GraphicMain
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	GraphicDrawTexture( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	~GraphicDrawTexture( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int priority						: 描画優先度
	// Arg    : const EffectParameter* pParameter	: エフェクトパラメータ
	// Arg    : Effect* pEffectGeneral				: 通常描画エフェクト
	// Arg    : IDirect3DTexture9** pTexture		: テクスチャ
	// Arg    : float* pMultiply					: 色の倍率
	//==============================================================================
	int Initialize( int priority, const EffectParameter* pParameter, Effect* pEffectGeneral, IDirect3DTexture9** ppTexture, float* pMultiply );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int priority						: 描画優先度
	// Arg    : const EffectParameter* pParameter	: エフェクトパラメータ
	// Arg    : Effect* pEffectGeneral				: 通常描画エフェクト
	// Arg    : IDirect3DTexture9** pTexture		: テクスチャ
	// Arg    : float* pMultiply					: 色の倍率
	//==============================================================================
	int Reinitialize( int priority, const EffectParameter* pParameter, Effect* pEffectGeneral, IDirect3DTexture9** ppTexture, float* pMultiply );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : GraphicDrawTexture* pOut					: コピー先アドレス
	//==============================================================================
	int Copy( GraphicDrawTexture* pOut ) const;

protected:

private:
	void InitializeSelf( void );
	GraphicDrawTexture( const GraphicDrawTexture& );
	GraphicDrawTexture operator=( const GraphicDrawTexture& );

};

#endif	// MY_GRAPHIC_DRAW_TEXTURE_H
