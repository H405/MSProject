//==============================================================================
//
// File   : Fade.cpp
// Brief  : フェード管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/13 tue : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルード
//******************************************************************************
#include "Fade.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// 静的メンバ変数
//******************************************************************************

//==============================================================================
// Brief  : コンストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Fade::Fade( void )
{
	// クラス内の初期化処理
	InitializeSelf();
}

//==============================================================================
// Brief  : デストラクタ
// Return : 									: 
// Arg    : void								: なし
//==============================================================================
Fade::~Fade( void )
{
	// 終了処理
	Finalize();
}

//==============================================================================
// Brief  : 初期化処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Fade::Initialize( void )
{


	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 終了処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Fade::Finalize( void )
{
	// クラス内の初期化処理
	InitializeSelf();

	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 再初期化処理
// Return : int									: 実行結果
// Arg    : void								: なし
//==============================================================================
int Fade::Reinitialize( void )
{
	// 終了処理
	int		result;		// 実行結果
	result = Finalize();
	if( result != 0 )
	{
		return result;
	}

	// 初期化処理
	return Initialize();
}

//==============================================================================
// Brief  : クラスのコピー
// Return : int									: 実行結果
// Arg    : Fade* pOut							: コピー先アドレス
//==============================================================================
int Fade::Copy( Fade* pOut ) const
{
	// 正常終了
	return 0;
}

//==============================================================================
// Brief  : 更新処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Fade::Update( void )
{
	// フェード処理判定
	if( !isFading_ )
	{
		return;
	}

	// タイマー経過
	if( timePast_ < timeFade_ )
	{
		++timePast_;
	}
	else
	{
		if( state_ != STATE_IN_AFTER && state_ != STATE_OUT_AFTER )
		{
			state_ = state_ + 1;
		}
		else
		{
			isFading_ = false;
		}
	}

	// 割合の更新
	proportion_ = static_cast< float >( timePast_ ) / timeFade_;
	proportion_ = (state_ <= STATE_IN_AFTER ? 1.0f - proportion_ : proportion_);
}

//==============================================================================
// Brief  : フェードイン
// Return : void								: なし
// Arg    : int time							: フェードに掛かる時間
//==============================================================================
void Fade::FadeIn( int time )
{
	// メンバの設定
	proportion_ = 1.0f;
	timeFade_ = time;
	timePast_ = 0;
	isFading_ = true;

	// 状態の設定
	state_ = STATE_IN_WHILE;

	// フェード処理フラグ設定
	isFading_ = true;
}

//==============================================================================
// Brief  : フェードアウト
// Return : void								: なし
// Arg    : int time							: フェードにかかる時間
//==============================================================================
void Fade::FadeOut( int time )
{
	// メンバの設定
	proportion_ = 0.0f;
	timeFade_ = time;
	timePast_ = 0;
	isFading_ = true;

	// 状態の設定
	state_ = STATE_OUT_WHILE;

	// フェード処理フラグ設定
	isFading_ = true;
}

//==============================================================================
// Brief  : フェード割合の取得
// Return : float								: フェード割合
// Arg    : void								: なし
//==============================================================================
float Fade::GetProportion( void )
{
	// 値の返却
	return proportion_;
}

//==============================================================================
// Brief  : フェード状態の取得
// Return : int									: 返却する値
// Arg    : void								: なし
//==============================================================================
int Fade::GetState( void ) const
{
	// 値の返却
	return state_;
}

//==============================================================================
// Brief  : クラス内の初期化処理
// Return : void								: なし
// Arg    : void								: なし
//==============================================================================
void Fade::InitializeSelf( void )
{
	// メンバ変数の初期化
	proportion_ = 0.0f;
	timeFade_ = 1;
	timePast_ = 0;
	state_ = STATE_IN_AFTER;
	isFading_ = false;
}
