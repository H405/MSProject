//==============================================================================
//
// File   : Graphic.h
// Brief  : 描画処理の管理クラス
// Author : Taiga Shirakawa
// Date   : 2015/10/10 sat : Taiga Shirakawa : create
//
//==============================================================================

//******************************************************************************
// インクルードガード
//******************************************************************************
#ifndef MY_GRAPHIC_H
#define MY_GRAPHIC_H

//******************************************************************************
// インクルード
//******************************************************************************
#include "d3dx9.h"

//******************************************************************************
// ライブラリ
//******************************************************************************

//******************************************************************************
// マクロ定義
//******************************************************************************

//******************************************************************************
// クラス前方宣言
//******************************************************************************
class Drawer;
class RenderMatrix;
template < class Graphci > class ManagerDraw;

//******************************************************************************
// クラス定義
//******************************************************************************
class Graphic
{
public:
	//==============================================================================
	// Brief  : コンストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	Graphic( void );

	//==============================================================================
	// Brief  : デストラクタ
	// Return : 									: 
	// Arg    : void								: なし
	//==============================================================================
	virtual ~Graphic( void );

	//==============================================================================
	// Brief  : 初期化処理
	// Return : int									: 実行結果
	// Arg    : int priority						: 描画優先度
	//==============================================================================
	virtual int Initialize( int priority );

	//==============================================================================
	// Brief  : 終了処理
	// Return : int									: 実行結果
	// Arg    : void								: なし
	//==============================================================================
	virtual int Finalize( void );

	//==============================================================================
	// Brief  : 再初期化処理
	// Return : int									: 実行結果
	// Arg    : int priority						: 描画優先度
	//==============================================================================
	virtual int Reinitialize( int priority );

	//==============================================================================
	// Brief  : クラスのコピー
	// Return : int									: 実行結果
	// Arg    : Graphic* pOut						: コピー先アドレス
	//==============================================================================
	virtual int Copy( Graphic* pOut ) const;

	//==============================================================================
	// Brief  : 描画処理
	// Return : void								: なし
	// Arg    : int index							: 描画番号
	//==============================================================================
	void Draw( int index );
	
	//==============================================================================
	// Brief  : 描画管理クラスの設定
	// Return : void								: なし
	// Arg    : ManagerDraw* pValue					: 設定する値
	//==============================================================================
	static void SetManagerDraw( ManagerDraw< Graphic >* pValue );

	//==============================================================================
	// アクセサ
	//==============================================================================
	void SetMatrixWorld( const D3DXMATRIX& value );
	void GetMatrixWorld( D3DXMATRIX* pOut ) const;
	void SetRenderMatrix( RenderMatrix* pValue );
	RenderMatrix* GetRenderMatrix( void ) const;
	void SetIsEnable( bool value );
	bool GetIsEnable( void ) const;
	bool IsEnable( void ) const;

protected:
	int			countDraw_;			// 描画処理クラス数
	Drawer**	ppDraw_;			// 描画処理クラス
	D3DXMATRIX	matrixWorld_;		// ワールドマトリクス
	bool		isEnable_;			// 有効フラグ

private:
	virtual void InitializeSelf( void );
	Graphic( const Graphic& );
	Graphic operator=( const Graphic& );

	int		idDraw_;		// 描画登録番号

	static ManagerDraw< Graphic >*	pManagerDraw_;			// 描画管理クラス
};

#endif	// MY_GRAPHIC_H
